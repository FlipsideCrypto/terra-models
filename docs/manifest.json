{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.2", "generated_at": "2022-10-11T14:54:06.141653Z", "invocation_id": "dc64052f-f644-4b9d-9b6b-435204c66dde", "env": {}, "project_id": "76cebb2c444d72118969791fc106cde2", "user_id": "d90b151e-32e0-404a-a9fc-d33feaa75543", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.terra.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"terra2_blocks\"\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.chainwalkers.terra2_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "bronze", "fqn": ["terra", "bronze", "bronze__blocks"], "unique_id": "model.terra.bronze__blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "2a41bced42d32871d7bc7dcb6445cfa2369371b6630d39010f910221ca7eb52d"}, "tags": [], "refs": [], "sources": [["chainwalkers", "terra2_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1665500047.8351846, "compiled_sql": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.terra2_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.bronze.blocks"}, "model.terra.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"terra2_txs\"\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.chainwalkers.terra2_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "bronze", "fqn": ["terra", "bronze", "bronze__transactions"], "unique_id": "model.terra.bronze__transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "d8fdddd3ed31c931d80f677977382516aaf6e2af6f588f3e20dd2b3da41b36e4"}, "tags": [], "refs": [], "sources": [["chainwalkers", "terra2_txs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1665500047.8502402, "compiled_sql": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.terra2_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.bronze.transactions"}, "model.terra.classic__dim_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'labels'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_labels"], "unique_id": "model.terra.classic__dim_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_labels.sql", "original_file_path": "models/classic/classic__dim_labels.sql", "name": "classic__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "e45e227ea583a6dd6dfe6472d65e51ff2667865c1aae1479bd10f4c8c29959c5"}, "tags": [], "refs": [], "sources": [["terra_sv", "labels"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.8569415, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_labels"}, "model.terra.classic__dim_validator_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'validator_labels'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.validator_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_validator_labels"], "unique_id": "model.terra.classic__dim_validator_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_validator_labels.sql", "original_file_path": "models/classic/classic__dim_validator_labels.sql", "name": "classic__dim_validator_labels", "alias": "dim_validator_labels", "checksum": {"name": "sha256", "checksum": "d311222ce7c5c63144721decd1b0a5feaeabf9392b6e5a87bea12dd09cee0165"}, "tags": [], "refs": [], "sources": [["terra", "validator_labels"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_validator_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.863484, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.validator_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_validator_labels"}, "model.terra.classic__dim_oracle_prices": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'oracle_prices'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.oracle_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_oracle_prices"], "unique_id": "model.terra.classic__dim_oracle_prices", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_oracle_prices.sql", "original_file_path": "models/classic/classic__dim_oracle_prices.sql", "name": "classic__dim_oracle_prices", "alias": "dim_oracle_prices", "checksum": {"name": "sha256", "checksum": "2169baa9adf8c2b30ab2083425aa28f11f598a6b11f1be4841564506aa965f1e"}, "tags": [], "refs": [], "sources": [["terra", "oracle_prices"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_oracle_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.870073, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.oracle_prices", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_oracle_prices"}, "model.terra.classic__ez_anchor_deposits": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'deposits'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.deposits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_deposits"], "unique_id": "model.terra.classic__ez_anchor_deposits", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_deposits.sql", "original_file_path": "models/classic/classic__ez_anchor_deposits.sql", "name": "classic__ez_anchor_deposits", "alias": "ez_anchor_deposits", "checksum": {"name": "sha256", "checksum": "3ca9bbf3778d6e828f0f76a6355719b5145d2a6ce25f922709931be3935f33ba"}, "tags": [], "refs": [], "sources": [["anchor", "deposits"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_deposits.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.8775623, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.deposits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_deposits"}, "model.terra.classic__ez_anchor_liquidations": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'liquidations'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.liquidations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_liquidations"], "unique_id": "model.terra.classic__ez_anchor_liquidations", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_liquidations.sql", "original_file_path": "models/classic/classic__ez_anchor_liquidations.sql", "name": "classic__ez_anchor_liquidations", "alias": "ez_anchor_liquidations", "checksum": {"name": "sha256", "checksum": "d9c9dc825cc9dc000970a0838e385d911a9e9cd6552ef7b7061c85e8e24ef44e"}, "tags": [], "refs": [], "sources": [["anchor", "liquidations"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_liquidations.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.8840115, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.liquidations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_liquidations"}, "model.terra.classic__dim_astroport_pool_reserves": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'astroport',\n        'pool_reserves'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.astroport.pool_reserves"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_astroport_pool_reserves"], "unique_id": "model.terra.classic__dim_astroport_pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_astroport_pool_reserves.sql", "original_file_path": "models/classic/classic__dim_astroport_pool_reserves.sql", "name": "classic__dim_astroport_pool_reserves", "alias": "dim_astroport_pool_reserves", "checksum": {"name": "sha256", "checksum": "23cf02b7afd157d07a9717822d827cb09a2eaa9fa1e23c08fafddbbf935d5413"}, "tags": [], "refs": [], "sources": [["astroport", "pool_reserves"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_astroport_pool_reserves.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.8905694, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.astroport.pool_reserves", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_astroport_pool_reserves"}, "model.terra.classic__ez_gov_vote": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'gov_vote'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.gov_vote"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_gov_vote"], "unique_id": "model.terra.classic__ez_gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_gov_vote.sql", "original_file_path": "models/classic/classic__ez_gov_vote.sql", "name": "classic__ez_gov_vote", "alias": "ez_gov_vote", "checksum": {"name": "sha256", "checksum": "7175dc6d13482d7109214ab05c832efc29d29f9855d579ad5abb005f01ef5194"}, "tags": [], "refs": [], "sources": [["terra", "gov_vote"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_gov_vote.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.8970456, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.gov_vote", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_gov_vote"}, "model.terra.classic__ez_anchor_bonds": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'bonds'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.bonds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_bonds"], "unique_id": "model.terra.classic__ez_anchor_bonds", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_bonds.sql", "original_file_path": "models/classic/classic__ez_anchor_bonds.sql", "name": "classic__ez_anchor_bonds", "alias": "ez_anchor_bonds", "checksum": {"name": "sha256", "checksum": "6c4ef6b297f8d32486b24fa8e82d9a2451045bd65bcc7eb212b01d0273529825"}, "tags": [], "refs": [], "sources": [["anchor", "bonds"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_bonds.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9046493, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.bonds", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_bonds"}, "model.terra.classic__ez_anchor_borrows": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'borrows'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.borrows"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_borrows"], "unique_id": "model.terra.classic__ez_anchor_borrows", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_borrows.sql", "original_file_path": "models/classic/classic__ez_anchor_borrows.sql", "name": "classic__ez_anchor_borrows", "alias": "ez_anchor_borrows", "checksum": {"name": "sha256", "checksum": "ca84a425e4ccb3c425e0cd5db87ba69eb1540ca1be096a6d3d10765534460d7e"}, "tags": [], "refs": [], "sources": [["anchor", "borrows"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_borrows.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9111104, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.borrows", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_borrows"}, "model.terra.classic__ez_anchor_burns": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'burns'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.burns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_burns"], "unique_id": "model.terra.classic__ez_anchor_burns", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_burns.sql", "original_file_path": "models/classic/classic__ez_anchor_burns.sql", "name": "classic__ez_anchor_burns", "alias": "ez_anchor_burns", "checksum": {"name": "sha256", "checksum": "a4d2910ad2c099ac418305ddcdac9df668fc36e0dddad9166172db09d8b67753"}, "tags": [], "refs": [], "sources": [["anchor", "burns"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_burns.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9176168, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.burns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_burns"}, "model.terra.classic__ez_terraswap_lp_stake": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'lp_stake'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.lp_stake"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_lp_stake"], "unique_id": "model.terra.classic__ez_terraswap_lp_stake", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_lp_stake.sql", "original_file_path": "models/classic/classic__ez_terraswap_lp_stake.sql", "name": "classic__ez_terraswap_lp_stake", "alias": "ez_terraswap_lp_stake", "checksum": {"name": "sha256", "checksum": "b7671abc2037ef6c9996d4898706020bb63b756f5ac5954f6fa96016a19a36d4"}, "tags": [], "refs": [], "sources": [["terraswap", "lp_stake"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_lp_stake.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9241834, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.lp_stake", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_lp_stake"}, "model.terra.classic__ez_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'transfers'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_transfers"], "unique_id": "model.terra.classic__ez_transfers", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_transfers.sql", "original_file_path": "models/classic/classic__ez_transfers.sql", "name": "classic__ez_transfers", "alias": "ez_transfers", "checksum": {"name": "sha256", "checksum": "db3829d8b6fb15b027814846ad1bf41d5740598ca76430e0dbf49f0259339cf2"}, "tags": [], "refs": [], "sources": [["terra", "transfers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9306748, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_transfers"}, "model.terra.classic__fact_transitions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'transitions'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_transitions"], "unique_id": "model.terra.classic__fact_transitions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_transitions.sql", "original_file_path": "models/classic/classic__fact_transitions.sql", "name": "classic__fact_transitions", "alias": "fact_transitions", "checksum": {"name": "sha256", "checksum": "bcf0857758286410fc05372167561ae8c3c65e1be13ea73c222c2cf57dbb2a97"}, "tags": [], "refs": [], "sources": [["terra_sv", "transitions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_transitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9382327, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.transitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_transitions"}, "model.terra.classic__ez_staking": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'staking'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.staking"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_staking"], "unique_id": "model.terra.classic__ez_staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_staking.sql", "original_file_path": "models/classic/classic__ez_staking.sql", "name": "classic__ez_staking", "alias": "ez_staking", "checksum": {"name": "sha256", "checksum": "f8aed521ae0594a46e3a946e0e8fe6bb4ecab0925809bd9ceb59f73fef885ca4"}, "tags": [], "refs": [], "sources": [["terra", "staking"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9446445, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.staking", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_staking"}, "model.terra.classic__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'transactions'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_transactions"], "unique_id": "model.terra.classic__fact_transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_transactions.sql", "original_file_path": "models/classic/classic__fact_transactions.sql", "name": "classic__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "b6ac3a53974ae117a1edc6542ce68275afa3e2db323564e8d5a51ef46f907c93"}, "tags": [], "refs": [], "sources": [["terra_sv", "transactions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9511511, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_transactions"}, "model.terra.classic__ez_gov_submit_proposal": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'gov_submit_proposal'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.gov_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_gov_submit_proposal"], "unique_id": "model.terra.classic__ez_gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_gov_submit_proposal.sql", "original_file_path": "models/classic/classic__ez_gov_submit_proposal.sql", "name": "classic__ez_gov_submit_proposal", "alias": "ez_gov_submit_proposal", "checksum": {"name": "sha256", "checksum": "62b5b3ee233a61c64eef76168ac5c716749bb74e6373f80300f50c80c377e85b"}, "tags": [], "refs": [], "sources": [["terra", "gov_submit_proposal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_gov_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9577098, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.gov_submit_proposal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_gov_submit_proposal"}, "model.terra.classic__ez_anchor_redeem": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'redeem'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.redeem"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_redeem"], "unique_id": "model.terra.classic__ez_anchor_redeem", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_redeem.sql", "original_file_path": "models/classic/classic__ez_anchor_redeem.sql", "name": "classic__ez_anchor_redeem", "alias": "ez_anchor_redeem", "checksum": {"name": "sha256", "checksum": "7d0d92b43961f3339cf261e2de4931c1df6b9990945b3418fbab4bf701aebe01"}, "tags": [], "refs": [], "sources": [["anchor", "redeem"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_redeem.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9642854, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.redeem", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_redeem"}, "model.terra.classic__ez_astroport_swaps": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'astroport',\n        'swaps'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.astroport.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_astroport_swaps"], "unique_id": "model.terra.classic__ez_astroport_swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_astroport_swaps.sql", "original_file_path": "models/classic/classic__ez_astroport_swaps.sql", "name": "classic__ez_astroport_swaps", "alias": "ez_astroport_swaps", "checksum": {"name": "sha256", "checksum": "821748162e6bb0ab268a3e9ef70519b6b1eca91a7031573db7f06992bfff723f"}, "tags": [], "refs": [], "sources": [["astroport", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_astroport_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9718308, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.astroport.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_astroport_swaps"}, "model.terra.classic__ez_anchor_repay": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'repay'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.repay"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_repay"], "unique_id": "model.terra.classic__ez_anchor_repay", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_repay.sql", "original_file_path": "models/classic/classic__ez_anchor_repay.sql", "name": "classic__ez_anchor_repay", "alias": "ez_anchor_repay", "checksum": {"name": "sha256", "checksum": "16a5e1e1e80ee0be7ac3f1cc382a2626a4d025c16f34af69929b82d823c09293"}, "tags": [], "refs": [], "sources": [["anchor", "repay"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_repay.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9782848, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.repay", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_repay"}, "model.terra.classic__ez_airdrop_claims": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'airdrop_claims'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.airdrop_claims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_airdrop_claims"], "unique_id": "model.terra.classic__ez_airdrop_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_airdrop_claims.sql", "original_file_path": "models/classic/classic__ez_airdrop_claims.sql", "name": "classic__ez_airdrop_claims", "alias": "ez_airdrop_claims", "checksum": {"name": "sha256", "checksum": "96b5be1e07b9d91e6c74cea12136224315e52d52aa2ee4798f473db58b9af4fb"}, "tags": [], "refs": [], "sources": [["terra", "airdrop_claims"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_airdrop_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.984802, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.airdrop_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_airdrop_claims"}, "model.terra.classic__ez_swaps": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'swaps'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_swaps"], "unique_id": "model.terra.classic__ez_swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_swaps.sql", "original_file_path": "models/classic/classic__ez_swaps.sql", "name": "classic__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "5301e32b2e424629d86fa87256fd35b085b9b045b65583c82ce1d428839ce1d5"}, "tags": [], "refs": [], "sources": [["terra", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9914005, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_swaps"}, "model.terra.classic__ez_reward": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'reward'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.reward"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_reward"], "unique_id": "model.terra.classic__ez_reward", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_reward.sql", "original_file_path": "models/classic/classic__ez_reward.sql", "name": "classic__ez_reward", "alias": "ez_reward", "checksum": {"name": "sha256", "checksum": "ff6529b90231810561486607094d9e7363b37834d946b439340b1ae344ccac47"}, "tags": [], "refs": [], "sources": [["terra", "reward"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_reward.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500047.9979203, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.reward", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_reward"}, "model.terra.classic__ez_anchor_collateral": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'collateral'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.collateral"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_collateral"], "unique_id": "model.terra.classic__ez_anchor_collateral", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_collateral.sql", "original_file_path": "models/classic/classic__ez_anchor_collateral.sql", "name": "classic__ez_anchor_collateral", "alias": "ez_anchor_collateral", "checksum": {"name": "sha256", "checksum": "ff8f4d381df3eb516ffa3cea6a298ed5c9a122f5221a7515adf3b8ed32048e91"}, "tags": [], "refs": [], "sources": [["anchor", "collateral"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_collateral.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0054643, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.collateral", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_collateral"}, "model.terra.classic__ez_terraswap_lp_actions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'lp_actions'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_lp_actions"], "unique_id": "model.terra.classic__ez_terraswap_lp_actions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_lp_actions.sql", "original_file_path": "models/classic/classic__ez_terraswap_lp_actions.sql", "name": "classic__ez_terraswap_lp_actions", "alias": "ez_terraswap_lp_actions", "checksum": {"name": "sha256", "checksum": "ab27a74e1620ce97283aa1f3efe785156257868532ec3c0fb3b46e22722a339f"}, "tags": [], "refs": [], "sources": [["terraswap", "lp_actions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0119445, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.lp_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_lp_actions"}, "model.terra.classic__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'blocks'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_blocks"], "unique_id": "model.terra.classic__fact_blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_blocks.sql", "original_file_path": "models/classic/classic__fact_blocks.sql", "name": "classic__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "3931baf179af996f74665152b57c16ef92ca7a88dad53e89663fd218320e2282"}, "tags": [], "refs": [], "sources": [["terra_sv", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0184326, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_blocks"}, "model.terra.classic__ez_terraswap_swaps": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'swaps'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_swaps"], "unique_id": "model.terra.classic__ez_terraswap_swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_swaps.sql", "original_file_path": "models/classic/classic__ez_terraswap_swaps.sql", "name": "classic__ez_terraswap_swaps", "alias": "ez_terraswap_swaps", "checksum": {"name": "sha256", "checksum": "a32ddfeb18eebc0b963b305f1fc9ec91c144c36db2bf2ea37ba2814fea59e844"}, "tags": [], "refs": [], "sources": [["terraswap", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0250912, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_swaps"}, "model.terra.classic__ez_anchor_gov_submit_proposal": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_submit_proposal'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_submit_proposal"], "unique_id": "model.terra.classic__ez_anchor_gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_submit_proposal.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_submit_proposal.sql", "name": "classic__ez_anchor_gov_submit_proposal", "alias": "ez_anchor_gov_submit_proposal", "checksum": {"name": "sha256", "checksum": "fe39346159bcc7c51902263d6eb79945bae9a2b172a1058a51bd01c0f5be3ee8"}, "tags": [], "refs": [], "sources": [["anchor", "gov_submit_proposal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0316465, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_submit_proposal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_submit_proposal"}, "model.terra.classic__ez_anchor_reward_claims": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'reward_claims'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.reward_claims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_reward_claims"], "unique_id": "model.terra.classic__ez_anchor_reward_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_reward_claims.sql", "original_file_path": "models/classic/classic__ez_anchor_reward_claims.sql", "name": "classic__ez_anchor_reward_claims", "alias": "ez_anchor_reward_claims", "checksum": {"name": "sha256", "checksum": "23f45fdb2a05be2d5224903a3b29a507d9a6f5a2feb551e4e6e4ed00a173f35d"}, "tags": [], "refs": [], "sources": [["anchor", "reward_claims"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_reward_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0391996, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.reward_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_reward_claims"}, "model.terra.classic__dim_nft_metadata": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'nft_metadata'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_nft_metadata"], "unique_id": "model.terra.classic__dim_nft_metadata", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_nft_metadata.sql", "original_file_path": "models/classic/classic__dim_nft_metadata.sql", "name": "classic__dim_nft_metadata", "alias": "dim_nft_metadata", "checksum": {"name": "sha256", "checksum": "543c95a97d22e4319370dca659c717928137f72ef53a98e93c9b189509e7060e"}, "tags": [], "refs": [], "sources": [["terra", "nft_metadata"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.045614, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_nft_metadata"}, "model.terra.classic__fact_messages": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'msgs'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.msgs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_messages"], "unique_id": "model.terra.classic__fact_messages", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_messages.sql", "original_file_path": "models/classic/classic__fact_messages.sql", "name": "classic__fact_messages", "alias": "fact_messages", "checksum": {"name": "sha256", "checksum": "280cd7e45af0f554d395875121b591bf24e3bc477ae88ba013089c18c1cf39f2"}, "tags": [], "refs": [], "sources": [["terra_sv", "msgs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0520825, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.msgs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_messages"}, "model.terra.classic__ez_anchor_gov_staking": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_staking'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_staking"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_staking"], "unique_id": "model.terra.classic__ez_anchor_gov_staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_staking.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_staking.sql", "name": "classic__ez_anchor_gov_staking", "alias": "ez_anchor_gov_staking", "checksum": {"name": "sha256", "checksum": "4876793afbe0f4d4b5c32a2ebd58d03421adc597bfefc8387504fa1ae246578a"}, "tags": [], "refs": [], "sources": [["anchor", "gov_staking"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0586553, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_staking", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_staking"}, "model.terra.classic__dim_tax_rate": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'tax_rate'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.tax_rate"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_tax_rate"], "unique_id": "model.terra.classic__dim_tax_rate", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_tax_rate.sql", "original_file_path": "models/classic/classic__dim_tax_rate.sql", "name": "classic__dim_tax_rate", "alias": "dim_tax_rate", "checksum": {"name": "sha256", "checksum": "4a779a2f4c9327d30028c962b896db2d5d3f6d9928fed287b119c41e94d8b0a8"}, "tags": [], "refs": [], "sources": [["terra", "tax_rate"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_tax_rate.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.065179, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.tax_rate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_tax_rate"}, "model.terra.classic__ez_anchor_gov_vote": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_vote'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_vote"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_vote"], "unique_id": "model.terra.classic__ez_anchor_gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_vote.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_vote.sql", "name": "classic__ez_anchor_gov_vote", "alias": "ez_anchor_gov_vote", "checksum": {"name": "sha256", "checksum": "bdbf8ed4a0e5f94f440bdc0ecc7c07041099197c4b2b4ae4679b194de252558c"}, "tags": [], "refs": [], "sources": [["anchor", "gov_vote"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_vote.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.072831, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_vote", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_vote"}, "model.terra.classic__fact_message_events": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'msg_events'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.msg_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_message_events"], "unique_id": "model.terra.classic__fact_message_events", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_message_events.sql", "original_file_path": "models/classic/classic__fact_message_events.sql", "name": "classic__fact_message_events", "alias": "fact_message_events", "checksum": {"name": "sha256", "checksum": "47b6b151bd9ee2e00e1fb285704307fe29c7981aefb66aa79c8ac4f734da58ec"}, "tags": [], "refs": [], "sources": [["terra_sv", "msg_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_message_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0793552, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.msg_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_message_events"}, "model.terra.classic__dim_terraswap_pool_reserves": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'pool_reserves'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.pool_reserves"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_terraswap_pool_reserves"], "unique_id": "model.terra.classic__dim_terraswap_pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_terraswap_pool_reserves.sql", "original_file_path": "models/classic/classic__dim_terraswap_pool_reserves.sql", "name": "classic__dim_terraswap_pool_reserves", "alias": "dim_terraswap_pool_reserves", "checksum": {"name": "sha256", "checksum": "ec0583df0f7d77e6716d1a13036706bc3263277218b6fa05aeb3e7958012847d"}, "tags": [], "refs": [], "sources": [["terraswap", "pool_reserves"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_terraswap_pool_reserves.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0858448, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.pool_reserves", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_terraswap_pool_reserves"}, "model.terra.classic__dim_daily_balances": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'daily_balances'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.daily_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_daily_balances"], "unique_id": "model.terra.classic__dim_daily_balances", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_daily_balances.sql", "original_file_path": "models/classic/classic__dim_daily_balances.sql", "name": "classic__dim_daily_balances", "alias": "dim_daily_balances", "checksum": {"name": "sha256", "checksum": "442ca9d9b55879fb3c92f3aa27ed421c0c35702af958c9662ad5834fea473ee5"}, "tags": [], "refs": [], "sources": [["terra", "daily_balances"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_daily_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0924633, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.daily_balances", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_daily_balances"}, "model.terra.classic__dim_validator_voting_power": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'validator_voting_power'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.validator_voting_power"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_validator_voting_power"], "unique_id": "model.terra.classic__dim_validator_voting_power", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_validator_voting_power.sql", "original_file_path": "models/classic/classic__dim_validator_voting_power.sql", "name": "classic__dim_validator_voting_power", "alias": "dim_validator_voting_power", "checksum": {"name": "sha256", "checksum": "7482fc01d7f46893e4b23dd1e2ac8990a3849e99036dbaaf7a9e853ba683e2e4"}, "tags": [], "refs": [], "sources": [["terra", "validator_voting_power"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_validator_voting_power.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1665500048.0989628, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.validator_voting_power", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_validator_voting_power"}, "model.terra.silver__messages": {"raw_sql": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp\"],\n    unique_key = \"message_id\",\n) }}\n\nWITH txs AS (\n\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_id,\n        tx,\n        tx_succeeded,\n        VALUE :events AS logs,\n        VALUE :msg_index :: NUMBER AS message_index,\n        tx :body :messages [0] :\"@type\" :: STRING AS message_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"silver__transactions\") }},\n        LATERAL FLATTEN(\n            input => tx :tx_result :log\n        )\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nblocks AS (\n    SELECT\n        block_id,\n        chain_id\n    FROM\n        {{ ref(\"silver__blocks\") }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nevents AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        message_index,\n        tx_succeeded,\n        tx :body :messages [0] AS message_value,\n        message_type,\n        VALUE AS logs,\n        VALUE :attributes AS event_attributes,\n        VALUE :type :: STRING AS event_type,\n        INDEX AS event_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => logs\n        )\n),\nattributes AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        event_attributes,\n        event_type,\n        event_index,\n        tx_succeeded,\n        message_index,\n        message_type,\n        INDEX AS attribute_index,\n        VALUE AS ATTRIBUTE,\n        VALUE :key :: STRING AS attribute_key,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[0-9]+'\n            ),\n            VALUE :value :: STRING\n        ) AS attribute_value,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[A-Za-z]+'\n            ),\n            NULL\n        ) AS currency,\n        LAST_VALUE(currency) over (\n            PARTITION BY tx_id,\n            event_type\n            ORDER BY\n                currency DESC\n        ) AS last_currency,\n        COUNT(attribute_key) over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n        ) AS key_frequency,\n        ROW_NUMBER() over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n            ORDER BY\n                attribute_key\n        ) - 1 AS key_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        events,\n        LATERAL FLATTEN(\n            input => event_attributes\n        )\n),\nwindow_functions AS (\n    SELECT\n        tx_id,\n        tx,\n        event_type,\n        event_attributes,\n        event_index,\n        message_index,\n        message_type,\n        tx_succeeded,\n        attributes.block_id,\n        chain_id,\n        block_timestamp,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                attribute_key,\n                '_',\n                key_index\n            ),\n            attribute_key\n        ) AS unique_attribute_key,\n        attribute_value,\n        OBJECT_AGG(\n            unique_attribute_key,\n            attribute_value :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS attribute_obj,\n        OBJECT_INSERT(\n            attribute_obj,\n            'currency',\n            last_currency\n        ) AS final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        attributes\n        JOIN blocks\n        ON attributes.block_id = blocks.block_id\n),\ndistinct_events_table AS (\n    SELECT\n        DISTINCT tx_id,\n        message_index,\n        event_type,\n        chain_id,\n        message_type,\n        tx_succeeded,\n        block_timestamp,\n        block_id,\n        final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        window_functions\n),\nfinal_table AS (\n    SELECT\n        DISTINCT CONCAT(\n            tx_id,\n            '-',\n            message_index\n        ) AS message_id,\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_index,\n        message_type,\n        OBJECT_AGG(\n            event_type,\n            final_attrib_obj\n        ) over (\n            PARTITION BY tx_id,\n            message_index\n        ) AS attributes,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        distinct_events_table\n)\nSELECT\n    *\nFROM\n    final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "message_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__messages"], "unique_id": "model.terra.silver__messages", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__messages.sql", "original_file_path": "models/silver/silver__messages.sql", "name": "silver__messages", "alias": "messages", "checksum": {"name": "sha256", "checksum": "982faf5aa41587db18b00a8afe29357dadfb2634077274a8d5eef1fc0909df2f"}, "tags": [], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains all the messages and their events of the Terra2 blockchain.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTES": {"name": "ATTRIBUTES", "description": "The messages and message events attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/silver/silver__messages.yml", "compiled_path": "target/compiled/terra/models/silver/silver__messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "message_id"}, "created_at": 1665500048.5260258, "compiled_sql": "\n\nWITH txs AS (\n\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_id,\n        tx,\n        tx_succeeded,\n        VALUE :events AS logs,\n        VALUE :msg_index :: NUMBER AS message_index,\n        tx :body :messages [0] :\"@type\" :: STRING AS message_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.silver.transactions,\n        LATERAL FLATTEN(\n            input => tx :tx_result :log\n        )\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.messages\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.messages\n)\n),\nblocks AS (\n    SELECT\n        block_id,\n        chain_id\n    FROM\n        TERRA_DEV.silver.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.messages\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.messages\n)\n),\nevents AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        message_index,\n        tx_succeeded,\n        tx :body :messages [0] AS message_value,\n        message_type,\n        VALUE AS logs,\n        VALUE :attributes AS event_attributes,\n        VALUE :type :: STRING AS event_type,\n        INDEX AS event_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => logs\n        )\n),\nattributes AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        event_attributes,\n        event_type,\n        event_index,\n        tx_succeeded,\n        message_index,\n        message_type,\n        INDEX AS attribute_index,\n        VALUE AS ATTRIBUTE,\n        VALUE :key :: STRING AS attribute_key,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[0-9]+'\n            ),\n            VALUE :value :: STRING\n        ) AS attribute_value,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[A-Za-z]+'\n            ),\n            NULL\n        ) AS currency,\n        LAST_VALUE(currency) over (\n            PARTITION BY tx_id,\n            event_type\n            ORDER BY\n                currency DESC\n        ) AS last_currency,\n        COUNT(attribute_key) over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n        ) AS key_frequency,\n        ROW_NUMBER() over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n            ORDER BY\n                attribute_key\n        ) - 1 AS key_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        events,\n        LATERAL FLATTEN(\n            input => event_attributes\n        )\n),\nwindow_functions AS (\n    SELECT\n        tx_id,\n        tx,\n        event_type,\n        event_attributes,\n        event_index,\n        message_index,\n        message_type,\n        tx_succeeded,\n        attributes.block_id,\n        chain_id,\n        block_timestamp,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                attribute_key,\n                '_',\n                key_index\n            ),\n            attribute_key\n        ) AS unique_attribute_key,\n        attribute_value,\n        OBJECT_AGG(\n            unique_attribute_key,\n            attribute_value :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS attribute_obj,\n        OBJECT_INSERT(\n            attribute_obj,\n            'currency',\n            last_currency\n        ) AS final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        attributes\n        JOIN blocks\n        ON attributes.block_id = blocks.block_id\n),\ndistinct_events_table AS (\n    SELECT\n        DISTINCT tx_id,\n        message_index,\n        event_type,\n        chain_id,\n        message_type,\n        tx_succeeded,\n        block_timestamp,\n        block_id,\n        final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        window_functions\n),\nfinal_table AS (\n    SELECT\n        DISTINCT CONCAT(\n            tx_id,\n            '-',\n            message_index\n        ) AS message_id,\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_index,\n        message_type,\n        OBJECT_AGG(\n            event_type,\n            final_attrib_obj\n        ) over (\n            PARTITION BY tx_id,\n            message_index\n        ) AS attributes,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        distinct_events_table\n)\nSELECT\n    *\nFROM\n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.messages"}, "model.terra.silver__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    cluster_by = ['_inserted_timestamp::DATE'],\n    unique_key = 'tx_id'\n) }}\n\nWITH bronze_txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        _ingested_at DESC\n) = 1\n),\nsilver_txs AS (\n    SELECT\n        tx_id,\n        block_id,\n        block_timestamp,\n        chain_id AS blockchain,\n        object_keys(\n            tx :auth_info :signer_infos [0] :mode_info\n        ) [0] :: STRING AS auth_type,\n        COALESCE(\n            tx :auth_info :signer_infos [0] :public_key :key :: ARRAY,\n            tx :auth_info :signer_infos [0] :public_key :public_keys :: ARRAY\n        ) AS authorizer_public_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :key\n        ) AS msg0_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :value\n        ) AS msg0_value,\n        tx :body :messages [0] :grantee :: STRING AS tx_grantee,\n        tx :auth_info :fee :granter :: STRING AS tx_granter,\n        tx :auth_info :fee :payer :: STRING AS tx_payer,\n        tx :auth_info :fee :gas_limit :: NUMBER AS gas_limit,\n        tx :tx_result :gasUsed :: NUMBER AS gas_used,\n        tx :auth_info :fee :amount [0] :amount :: NUMBER AS fee_raw,\n        tx :auth_info :fee :amount [0] :denom :: STRING AS fee_denom,\n        tx :body :memo :: STRING AS memo,\n        tx :tx_result :code :: NUMBER AS tx_code,\n        IFF(\n            tx_code = 0,\n            TRUE,\n            FALSE\n        ) AS tx_succeeded,\n        tx :tx_result :codespace :: STRING AS codespace,\n        tx,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        bronze_txs\n)\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    gas_limit,\n    gas_used,\n    fee_raw,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    silver_txs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.terra.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__transactions"], "unique_id": "model.terra.silver__transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "1649378db39419de4d7391e19e022024a1977cc32cf6e2eca33adfce39d6479c"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auth_type": {"name": "auth_type", "description": "What type of authorization was used, presently single or multi.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizer_public_key": {"name": "authorizer_public_key", "description": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_used": {"name": "gas_used", "description": "The gas actually used by this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_raw": {"name": "fee_raw", "description": "The transaction fee attached to the transaction, not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_denom": {"name": "fee_denom", "description": "The token the transaction fee is paid in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo, if any, attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "codespace": {"name": "codespace", "description": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_code": {"name": "tx_code", "description": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/terra/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp::DATE"], "unique_key": "tx_id"}, "created_at": 1665500048.3239136, "compiled_sql": "\n\nWITH bronze_txs AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            TERRA_DEV.silver.transactions\n    )\n\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        _ingested_at DESC\n) = 1\n),\nsilver_txs AS (\n    SELECT\n        tx_id,\n        block_id,\n        block_timestamp,\n        chain_id AS blockchain,\n        object_keys(\n            tx :auth_info :signer_infos [0] :mode_info\n        ) [0] :: STRING AS auth_type,\n        COALESCE(\n            tx :auth_info :signer_infos [0] :public_key :key :: ARRAY,\n            tx :auth_info :signer_infos [0] :public_key :public_keys :: ARRAY\n        ) AS authorizer_public_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :key\n        ) AS msg0_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :value\n        ) AS msg0_value,\n        tx :body :messages [0] :grantee :: STRING AS tx_grantee,\n        tx :auth_info :fee :granter :: STRING AS tx_granter,\n        tx :auth_info :fee :payer :: STRING AS tx_payer,\n        tx :auth_info :fee :gas_limit :: NUMBER AS gas_limit,\n        tx :tx_result :gasUsed :: NUMBER AS gas_used,\n        tx :auth_info :fee :amount [0] :amount :: NUMBER AS fee_raw,\n        tx :auth_info :fee :amount [0] :denom :: STRING AS fee_denom,\n        tx :body :memo :: STRING AS memo,\n        tx :tx_result :code :: NUMBER AS tx_code,\n        IFF(\n            tx_code = 0,\n            TRUE,\n            FALSE\n        ) AS tx_succeeded,\n        tx :tx_result :codespace :: STRING AS codespace,\n        tx,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        bronze_txs\n)\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    gas_limit,\n    gas_used,\n    fee_raw,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    silver_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.transactions"}, "model.terra.silver__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'block_id',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        {{ incremental_load_filter('_inserted_timestamp') }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_count,\n        header :app_hash :: STRING AS block_hash,\n        header :chain_id :: STRING AS chain_id,\n        header :consensus_hash :: STRING AS consensus_hash,\n        header :data_hash :: STRING AS data_hash,\n        header :evidence AS evidence,\n        header :evidence_hash :: STRING AS evidence_hash,\n        header :height :: INTEGER AS block_height,\n        header :last_block_id AS last_block_id,\n        header :last_commit AS last_commit,\n        header :last_commit_hash :: STRING AS last_commit_hash,\n        header :last_results_hash :: STRING AS last_results_hash,\n        header :next_validators_hash :: STRING AS next_validators_hash,\n        header :proposer_address :: STRING AS proposer_address,\n        header :validators_hash :: STRING AS validators_hash,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        base_blocks\n)\nSELECT\n    *\nFROM\n    FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__blocks"], "unique_id": "model.terra.silver__blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "5c8826a249be1d8a801de6e4d8b5b7de858b4e49de405ea4d449603392b13c40"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transaction on a block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONSENSUS_HASH": {"name": "CONSENSUS_HASH", "description": "The consensus hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA_HASH": {"name": "DATA_HASH", "description": "The data hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE": {"name": "EVIDENCE", "description": "The evidence gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE_HASH": {"name": "EVIDENCE_HASH", "description": "The evidence hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "The block height is a sequential number of the most recent block in the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_BLOCK_ID": {"name": "LAST_BLOCK_ID", "description": "The last block id taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT": {"name": "LAST_COMMIT", "description": "The last commit gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT_HASH": {"name": "LAST_COMMIT_HASH", "description": "The last commit hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_RESULTS_HASH": {"name": "LAST_RESULTS_HASH", "description": "The last results hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_VALIDATORS_HASH": {"name": "NEXT_VALIDATORS_HASH", "description": "The next validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The proposer address taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATORS_HASH": {"name": "VALIDATORS_HASH", "description": "The validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/terra/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1665500048.358587, "compiled_sql": "\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.bronze.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.blocks\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.blocks\n)\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_count,\n        header :app_hash :: STRING AS block_hash,\n        header :chain_id :: STRING AS chain_id,\n        header :consensus_hash :: STRING AS consensus_hash,\n        header :data_hash :: STRING AS data_hash,\n        header :evidence AS evidence,\n        header :evidence_hash :: STRING AS evidence_hash,\n        header :height :: INTEGER AS block_height,\n        header :last_block_id AS last_block_id,\n        header :last_commit AS last_commit,\n        header :last_commit_hash :: STRING AS last_commit_hash,\n        header :last_results_hash :: STRING AS last_results_hash,\n        header :next_validators_hash :: STRING AS next_validators_hash,\n        header :proposer_address :: STRING AS proposer_address,\n        header :validators_hash :: STRING AS validators_hash,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        base_blocks\n)\nSELECT\n    *\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.blocks"}, "model.terra.core__dim_address_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nSELECT\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name AS label,\n    project_name\nFROM\n    {{ source(\n        'labels',\n        'address_labels'\n    ) }}\nWHERE\n    blockchain = 'terra'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.labels.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__dim_address_labels"], "unique_id": "model.terra.core__dim_address_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__dim_address_labels.sql", "original_file_path": "models/core/core__dim_address_labels.sql", "name": "core__dim_address_labels", "alias": "dim_address_labels", "checksum": {"name": "sha256", "checksum": "a2576dece6ca1b2385dd5ec78da1cab9c42bb4d0a8eeee54e38c134809753508"}, "tags": [], "refs": [], "sources": [["labels", "address_labels"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__dim_address_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1665500048.1404107, "compiled_sql": "\n\nSELECT\n    blockchain,\n    address,\n    creator,\n    l1_label AS label_type,\n    l2_label AS label_subtype,\n    address_name AS label,\n    project_name\nFROM\n    flipside_prod_db.silver_crosschain.address_labels\nWHERE\n    blockchain = 'terra'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.dim_address_labels"}, "model.terra.core__fact_messages": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nwith messages as (\n\n    select\n        *\n    from\n        {{ ref('silver__messages') }}\n)\nselect\n    message_id,\n    block_timestamp,\n    block_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    message_index,\n    message_type,\n    attributes\nfrom\n    messages", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_messages"], "unique_id": "model.terra.core__fact_messages", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_messages.sql", "original_file_path": "models/core/core__fact_messages.sql", "name": "core__fact_messages", "alias": "fact_messages", "checksum": {"name": "sha256", "checksum": "170732a66bad83134d37ae6356c6386335a93656bf5b865f9dcc29a07e45adab"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTES": {"name": "ATTRIBUTES", "description": "The messages and message events attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/core/core__fact_messages.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1665500048.8757703, "compiled_sql": "\n\nwith messages as (\n\n    select\n        *\n    from\n        TERRA_DEV.silver.messages\n)\nselect\n    message_id,\n    block_timestamp,\n    block_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    message_index,\n    message_type,\n    attributes\nfrom\n    messages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_messages"}, "model.terra.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    chain_id,\n    consensus_hash,\n    data_hash,\n    evidence,\n    evidence_hash,\n    block_height,\n    last_block_id,\n    last_commit,\n    last_commit_hash,\n    last_results_hash,\n    next_validators_hash,\n    proposer_address,\n    validators_hash\nFROM\n    blocks", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_blocks"], "unique_id": "model.terra.core__fact_blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_blocks.sql", "original_file_path": "models/core/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "27b599cb60663d7d1d96b4518edd88f185ac78d5f917ff948512b97ba400fbe3"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONSENSUS_HASH": {"name": "CONSENSUS_HASH", "description": "The consensus hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA_HASH": {"name": "DATA_HASH", "description": "The data hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE": {"name": "EVIDENCE", "description": "The evidence gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE_HASH": {"name": "EVIDENCE_HASH", "description": "The evidence hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "The block height is a sequential number of the most recent block in the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_BLOCK_ID": {"name": "LAST_BLOCK_ID", "description": "The last block id taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT": {"name": "LAST_COMMIT", "description": "The last commit gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT_HASH": {"name": "LAST_COMMIT_HASH", "description": "The last commit hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_RESULTS_HASH": {"name": "LAST_RESULTS_HASH", "description": "The last results hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_VALIDATORS_HASH": {"name": "NEXT_VALIDATORS_HASH", "description": "The next validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The proposer address taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATORS_HASH": {"name": "VALIDATORS_HASH", "description": "The validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/core/core__fact_blocks.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1665500048.7122765, "compiled_sql": "\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.blocks\n)\nSELECT\n    block_id,\n    block_timestamp,\n    block_hash,\n    tx_count,\n    chain_id,\n    consensus_hash,\n    data_hash,\n    evidence,\n    evidence_hash,\n    block_height,\n    last_block_id,\n    last_commit,\n    last_commit_hash,\n    last_results_hash,\n    next_validators_hash,\n    proposer_address,\n    validators_hash\nFROM\n    blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_blocks"}, "model.terra.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    gas_limit,\n    gas_used,\n    fee_raw / pow(\n        10,\n        6\n    ) AS fee,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx\nFROM\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_transactions"], "unique_id": "model.terra.core__fact_transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "cdd5313cc28d2d268fa495bbce2a6dcdb50cec0f9a033815834aba6457038288"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auth_type": {"name": "auth_type", "description": "What type of authorization was used, presently single or multi.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizer_public_key": {"name": "authorizer_public_key", "description": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_used": {"name": "gas_used", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_raw": {"name": "fee_raw", "description": "The transaction fee attached to the transaction, not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_denom": {"name": "fee_denom", "description": "The token the transaction fee is paid in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo, if any, attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "codespace": {"name": "codespace", "description": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_code": {"name": "tx_code", "description": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "terra://models/core/core__fact_transactions.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1665500048.613751, "compiled_sql": "\n\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    gas_limit,\n    gas_used,\n    fee_raw / pow(\n        10,\n        6\n    ) AS fee,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx\nFROM\n    TERRA_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_transactions"}, "operation.terra.terra-on-run-start-0": {"raw_sql": "{{create_sps()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.terra.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "terra-on-run-start-0", "fqn": ["terra", "hooks", "terra-on-run-start-0"], "unique_id": "operation.terra.terra-on-run-start-0", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "hooks/terra-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "terra-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "e46ecbe0c861a628227d42a5a040c15408dec4dc6cc4cf5965b87aa714de99a7"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/./dbt_project.yml/hooks/terra-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"]}, "created_at": 1665500048.1866596, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transactions__inserted_timestamp"], "unique_id": "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transactions__inserted_timestamp.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__inserted_timestamp", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transactions.yml/not_null_silver__transactions__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3333724, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transactions\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transactions", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transactions.yml/dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9"}, "created_at": 1665500048.3359444, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_RAW' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__transactions"}, "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3596659, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e"}, "created_at": 1665500048.362268, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3680353, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1665500048.3706565, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3759944, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14"}, "created_at": 1665500048.3786433, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_HASH"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HASH", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3839567, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77"}, "created_at": 1665500048.3866196, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHAIN_ID", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.3923373, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a"}, "created_at": 1665500048.3949635, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_CONSENSUS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_CONSENSUS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CONSENSUS_HASH", "alias": "blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_CONSENSUS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4009755, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere CONSENSUS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR", "alias": "blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8"}, "created_at": 1665500048.4033482, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONSENSUS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_DATA_HASH"], "unique_id": "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_DATA_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_DATA_HASH", "alias": "blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_DATA_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4097915, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere DATA_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR", "alias": "blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430"}, "created_at": 1665500048.4122567, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_EVIDENCE"], "unique_id": "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_EVIDENCE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EVIDENCE", "alias": "blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_EVIDENCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4182508, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere EVIDENCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "VARIANT"], "column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT", "alias": "blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9"}, "created_at": 1665500048.4206042, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE'\n            and\n            relation_column_type not in ('VARCHAR', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_EVIDENCE_HASH"], "unique_id": "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_EVIDENCE_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EVIDENCE_HASH", "alias": "blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_EVIDENCE_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4265995, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere EVIDENCE_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR", "alias": "blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0"}, "created_at": 1665500048.4289546, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_HEIGHT"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEIGHT", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4349465, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f"}, "created_at": 1665500048.4373128, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_BLOCK_ID", "alias": "blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4429193, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT", "alias": "blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa"}, "created_at": 1665500048.4452946, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_BLOCK_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_COMMIT"], "unique_id": "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_COMMIT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_COMMIT", "alias": "blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_COMMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4517334, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_COMMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT", "alias": "blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b"}, "created_at": 1665500048.4540522, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_COMMIT_HASH"], "unique_id": "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_COMMIT_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_COMMIT_HASH", "alias": "blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_COMMIT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.459686, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_COMMIT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR", "alias": "blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136"}, "created_at": 1665500048.462035, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_RESULTS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_RESULTS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_RESULTS_HASH", "alias": "blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_RESULTS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.468052, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_RESULTS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR", "alias": "blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b"}, "created_at": 1665500048.4704258, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_RESULTS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_NEXT_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_NEXT_VALIDATORS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NEXT_VALIDATORS_HASH", "alias": "blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_NEXT_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4764013, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere NEXT_VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_112a835632045376c2d31024bccbe019\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR", "alias": "blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_112a835632045376c2d31024bccbe019.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019"}, "created_at": 1665500048.4787607, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_PROPOSER_ADDRESS"], "unique_id": "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PROPOSER_ADDRESS", "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_PROPOSER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4847505, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR", "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a"}, "created_at": 1665500048.487117, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_VALIDATORS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATORS_HASH", "alias": "blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.4931018, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR", "alias": "blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef"}, "created_at": 1665500048.4954789, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks__INSERTED_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks__INSERTED_TIMESTAMP", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5014567, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169"}, "created_at": 1665500048.5038316, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_block_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5098803, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from TERRA_DEV.silver.blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.blocks_block_id", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__messages_MESSAGE_ID"], "unique_id": "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__messages_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "unique_silver__messages_MESSAGE_ID", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/unique_silver__messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5270996, "compiled_sql": "\n    \n    \n\nselect\n    MESSAGE_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_ID is not null\ngroup by MESSAGE_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_ID"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_ID", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.529469, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77"}, "created_at": 1665500048.531818, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_BLOCK_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_BLOCK_ID", "alias": "messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5377195, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT", "alias": "messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17"}, "created_at": 1665500048.5400968, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_BLOCK_TIMESTAMP", "alias": "messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5460649, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02"}, "created_at": 1665500048.54843, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_TX_ID.084bc612c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_TX_ID"], "unique_id": "test.terra.not_null_silver__messages_TX_ID.084bc612c0", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_TX_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_TX_ID", "alias": "messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5540254, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR", "alias": "messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab"}, "created_at": 1665500048.5563924, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_TX_SUCCEEDED", "alias": "messages_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5620027, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN", "alias": "messages_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f"}, "created_at": 1665500048.5643408, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_CHAIN_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_CHAIN_ID", "alias": "messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.569936, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR", "alias": "messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605"}, "created_at": 1665500048.5723064, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_INDEX.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_INDEX", "alias": "messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5779288, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER", "alias": "messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee"}, "created_at": 1665500048.5802877, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_TYPE.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_TYPE", "alias": "messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5858781, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR", "alias": "messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265"}, "created_at": 1665500048.5882564, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_ATTRIBUTES"], "unique_id": "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_ATTRIBUTES.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_ATTRIBUTES", "alias": "messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_ATTRIBUTES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1665500048.5938528, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere ATTRIBUTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2de7436138259045e43776986b51828f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT", "alias": "messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_2de7436138259045e43776986b51828f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f"}, "created_at": 1665500048.5962245, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTES'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.silver__messages"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["message_id"], "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__messages_message_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_utils_unique_combination_of_columns_silver__messages_message_id", "alias": "messages_message_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f"}, "created_at": 1665500048.6018217, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        message_id\n    from TERRA_DEV.silver.messages\n    group by message_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.messages_message_id", "column_name": null, "file_key_name": "models.silver__messages"}, "test.terra.not_null_core__fact_transactions_tx_id.dd94c1ac9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_tx_id"], "unique_id": "test.terra.not_null_core__fact_transactions_tx_id.dd94c1ac9e", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_tx_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_id", "alias": "fact_transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.614842, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_transactions"}, "test.terra.unique_core__fact_transactions_tx_id.211ea20522": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_core", "fqn": ["terra", "core", "unique_core__fact_transactions_tx_id"], "unique_id": "test.terra.unique_core__fact_transactions_tx_id.211ea20522", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_core__fact_transactions_tx_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "unique_core__fact_transactions_tx_id", "alias": "fact_transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/unique_core__fact_transactions_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6172945, "compiled_sql": "\n    \n    \n\nselect\n    tx_id as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.core.fact_transactions\nwhere tx_id is not null\ngroup by tx_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_core.fact_transactions_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_transactions"}, "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c": {"raw_sql": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "tx_gaps", "kwargs": {"column_name": "tx_id", "column_block": "block_id", "column_tx_count": "tx_count", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.terra.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "tx_gaps_core", "fqn": ["terra", "core", "tx_gaps_core__fact_transactions_block_id__tx_id__tx_count"], "unique_id": "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "tx_gaps_core__fact_transactions_block_id__tx_id__tx_count", "alias": "fact_transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1665500048.620168, "compiled_sql": "\nWITH block_base AS (\n    SELECT\n        block_id,\n        tx_count\n    FROM\n        TERRA_DEV.silver.blocks\n),\nmodel_name AS (\n    SELECT\n        block_id,\n        COUNT(\n            DISTINCT tx_id\n        ) AS model_tx_count\n    FROM\n        (select * from TERRA_DEV.core.fact_transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n    GROUP BY\n        block_id\n)\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.tx_gaps_core.fact_transactions_block_id", "column_name": "tx_id", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_block_timestamp"], "unique_id": "test.terra.not_null_core__fact_transactions_block_timestamp.32cc47fbb2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_block_timestamp.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_block_timestamp", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.628506, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["terra", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075"}, "created_at": 1665500048.631167, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(block_timestamp as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.core.fact_transactions\n    where\n        -- to exclude erroneous future dates\n        cast(block_timestamp as TIMESTAMP) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::TIMESTAMP\n) as TIMESTAMP)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::TIMESTAMP\n) as TIMESTAMP)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_transactions_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da"}, "created_at": 1665500048.6626532, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_block_id.fbece8facc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_block_id"], "unique_id": "test.terra.not_null_core__fact_transactions_block_id.fbece8facc", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_block_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_block_id", "alias": "fact_transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6683588, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER.c3f16750e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_849206c079d8ab76673ad580972be4f4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_849206c079d8ab76673ad580972be4f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER.c3f16750e8", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_849206c079d8ab76673ad580972be4f4.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER", "alias": "fact_transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_849206c079d8ab76673ad580972be4f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_849206c079d8ab76673ad580972be4f4"}, "created_at": 1665500048.6707945, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_auth_type.c3ff76f78a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "auth_type", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_auth_type"], "unique_id": "test.terra.not_null_core__fact_transactions_auth_type.c3ff76f78a", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_auth_type.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_auth_type", "alias": "fact_transactions_auth_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_auth_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6764734, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere auth_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_auth_type", "column_name": "auth_type", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_authorizer_public_key.fc6ae8130d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "authorizer_public_key", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_authorizer_public_key"], "unique_id": "test.terra.not_null_core__fact_transactions_authorizer_public_key.fc6ae8130d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_authorizer_public_key.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_authorizer_public_key", "alias": "fact_transactions_authorizer_public_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_authorizer_public_key.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6789136, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere authorizer_public_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_authorizer_public_key", "column_name": "authorizer_public_key", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_gas_limit.c3fb97a749": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_gas_limit"], "unique_id": "test.terra.not_null_core__fact_transactions_gas_limit.c3fb97a749", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_gas_limit.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_gas_limit", "alias": "fact_transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_gas_limit.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6813128, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere gas_limit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_gas_limit", "column_name": "gas_limit", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_gas_used.7811982ae3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_used", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_gas_used"], "unique_id": "test.terra.not_null_core__fact_transactions_gas_used.7811982ae3", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_gas_used.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_gas_used", "alias": "fact_transactions_gas_used", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_gas_used.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6836774, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere gas_used is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_gas_used", "column_name": "gas_used", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_tx_code.252c0f2788": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_code", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_tx_code"], "unique_id": "test.terra.not_null_core__fact_transactions_tx_code.252c0f2788", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_tx_code.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_code", "alias": "fact_transactions_tx_code", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_tx_code.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6863303, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere tx_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_tx_code", "column_name": "tx_code", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER.e10ec974e5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e401b480fb44118e974adaec9d0c7637\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_code", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e401b480fb44118e974adaec9d0c7637", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER.e10ec974e5", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e401b480fb44118e974adaec9d0c7637.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER", "alias": "fact_transactions_tx_code", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_e401b480fb44118e974adaec9d0c7637.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e401b480fb44118e974adaec9d0c7637"}, "created_at": 1665500048.688783, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_CODE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_tx_code", "column_name": "tx_code", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_tx_succeeded.85fd90691c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_tx_succeeded"], "unique_id": "test.terra.not_null_core__fact_transactions_tx_succeeded.85fd90691c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_tx_succeeded.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_succeeded", "alias": "fact_transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.6944199, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN", "alias": "fact_transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357"}, "created_at": 1665500048.6968687, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_tx.56e7355817": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_tx"], "unique_id": "test.terra.not_null_core__fact_transactions_tx.56e7355817", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_tx.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx", "alias": "fact_transactions_tx", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_tx.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.702557, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere tx is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_tx", "column_name": "tx", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.713369, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec"}, "created_at": 1665500048.7158484, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7222261, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc"}, "created_at": 1665500048.7246182, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["terra", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7"}, "created_at": 1665500048.7302704, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.core.fact_blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::TIMESTAMP\n) as TIMESTAMP)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::TIMESTAMP\n) as TIMESTAMP)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.738361, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11"}, "created_at": 1665500048.7408042, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHAIN_ID", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7468798, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f"}, "created_at": 1665500048.7492962, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_CONSENSUS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_CONSENSUS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CONSENSUS_HASH", "alias": "fact_blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CONSENSUS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7553422, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere CONSENSUS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR", "alias": "fact_blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b"}, "created_at": 1665500048.757772, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONSENSUS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_DATA_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_DATA_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_DATA_HASH", "alias": "fact_blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_DATA_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7638245, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere DATA_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR", "alias": "fact_blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7"}, "created_at": 1665500048.7662268, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_EVIDENCE"], "unique_id": "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_EVIDENCE.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EVIDENCE", "alias": "fact_blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EVIDENCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.772304, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere EVIDENCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "VARIANT"], "column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT", "alias": "fact_blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155"}, "created_at": 1665500048.7747111, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE'\n            and\n            relation_column_type not in ('VARCHAR', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_EVIDENCE_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_EVIDENCE_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EVIDENCE_HASH", "alias": "fact_blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EVIDENCE_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7807903, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere EVIDENCE_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR", "alias": "fact_blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9"}, "created_at": 1665500048.7832031, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_HEIGHT"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_HEIGHT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.789259, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106"}, "created_at": 1665500048.791681, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_BLOCK_ID", "alias": "fact_blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.7973201, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb"}, "created_at": 1665500048.7997422, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_BLOCK_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_COMMIT"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_COMMIT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_COMMIT", "alias": "fact_blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_COMMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.80612, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_COMMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e9762a37e126391536369005b985a52b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT", "alias": "fact_blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_e9762a37e126391536369005b985a52b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b"}, "created_at": 1665500048.8085494, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_COMMIT_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_COMMIT_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_COMMIT_HASH", "alias": "fact_blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_COMMIT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8146005, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_COMMIT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR", "alias": "fact_blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22"}, "created_at": 1665500048.816986, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_RESULTS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_RESULTS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_RESULTS_HASH", "alias": "fact_blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_RESULTS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8229423, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_RESULTS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR", "alias": "fact_blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62"}, "created_at": 1665500048.825405, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_RESULTS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH", "alias": "fact_blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.831417, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere NEXT_VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR", "alias": "fact_blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023"}, "created_at": 1665500048.8338273, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_PROPOSER_ADDRESS"], "unique_id": "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_PROPOSER_ADDRESS", "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_PROPOSER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8398542, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR", "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac"}, "created_at": 1665500048.842251, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_VALIDATORS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_VALIDATORS_HASH", "alias": "fact_blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.848314, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR", "alias": "fact_blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b"}, "created_at": 1665500048.850746, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171"}, "created_at": 1665500048.8568194, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from TERRA_DEV.core.fact_blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.fact_blocks_block_id", "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.terra.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "sequence_gaps_core", "fqn": ["terra", "core", "sequence_gaps_core__fact_blocks_block_id"], "unique_id": "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "sequence_gaps_core__fact_blocks_block_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "sequence_gaps_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/sequence_gaps_core__fact_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1665500048.8629963, "compiled_sql": "WITH source AS (\n    SELECT\n        block_timestamp,\n        \n        block_id,\n        LAG(\n            block_id,\n            1\n        ) over (\n            \n            ORDER BY\n                block_id ASC\n        ) AS prev_block_id\n    FROM\n        (select * from TERRA_DEV.core.fact_blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    block_timestamp,\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.sequence_gaps_core.fact_blocks_block_id", "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_messages_MESSAGE_ID.87c372bdf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_MESSAGE_ID"], "unique_id": "test.terra.not_null_core__fact_messages_MESSAGE_ID.87c372bdf2", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_MESSAGE_ID.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_MESSAGE_ID", "alias": "fact_messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8768678, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR.673ee9328a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0616129c483623c972f0913fd9b9777\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0616129c483623c972f0913fd9b9777", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR.673ee9328a", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a0616129c483623c972f0913fd9b9777.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR", "alias": "fact_messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_a0616129c483623c972f0913fd9b9777.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a0616129c483623c972f0913fd9b9777"}, "created_at": 1665500048.8795722, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_BLOCK_ID.c804aac939": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_messages_BLOCK_ID.c804aac939", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_BLOCK_ID", "alias": "fact_messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8856728, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT.554b696b59": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8c05d6051a8936e1586fb1e8994cfab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8c05d6051a8936e1586fb1e8994cfab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT.554b696b59", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b8c05d6051a8936e1586fb1e8994cfab.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_b8c05d6051a8936e1586fb1e8994cfab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b8c05d6051a8936e1586fb1e8994cfab"}, "created_at": 1665500048.8881457, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_BLOCK_TIMESTAMP.43d3414c7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_messages_BLOCK_TIMESTAMP.43d3414c7d", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_BLOCK_TIMESTAMP", "alias": "fact_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.8942196, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2c0ae10d10": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4392a5c7dea337829134ef8f99fe8ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4392a5c7dea337829134ef8f99fe8ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2c0ae10d10", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e4392a5c7dea337829134ef8f99fe8ac.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_e4392a5c7dea337829134ef8f99fe8ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e4392a5c7dea337829134ef8f99fe8ac"}, "created_at": 1665500048.8966646, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_TX_ID.e208fdbc3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_TX_ID"], "unique_id": "test.terra.not_null_core__fact_messages_TX_ID.e208fdbc3b", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_TX_ID.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_TX_ID", "alias": "fact_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.902361, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR.9a21b40e4c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_813c499905201eee8abc74ca674fd5f5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_813c499905201eee8abc74ca674fd5f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR.9a21b40e4c", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_813c499905201eee8abc74ca674fd5f5.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR", "alias": "fact_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_813c499905201eee8abc74ca674fd5f5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_813c499905201eee8abc74ca674fd5f5"}, "created_at": 1665500048.9048336, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_tx_succeeded.2fb92a20bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_tx_succeeded"], "unique_id": "test.terra.not_null_core__fact_messages_tx_succeeded.2fb92a20bf", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_tx_succeeded.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_tx_succeeded", "alias": "fact_messages_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.9112911, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN.8755b673e0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_46599ad17ea4f5a08a7218dab438ede7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_46599ad17ea4f5a08a7218dab438ede7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN.8755b673e0", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_46599ad17ea4f5a08a7218dab438ede7.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN", "alias": "fact_messages_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_46599ad17ea4f5a08a7218dab438ede7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_46599ad17ea4f5a08a7218dab438ede7"}, "created_at": 1665500048.9137104, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_CHAIN_ID.b77c0e6e30": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_messages_CHAIN_ID.b77c0e6e30", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_CHAIN_ID", "alias": "fact_messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.9193969, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR.b75726d6bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e52f88f25d3c76075fe024210d7274d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e52f88f25d3c76075fe024210d7274d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR.b75726d6bf", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_9e52f88f25d3c76075fe024210d7274d.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR", "alias": "fact_messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_9e52f88f25d3c76075fe024210d7274d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_9e52f88f25d3c76075fe024210d7274d"}, "created_at": 1665500048.9218087, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_MESSAGE_INDEX.c749e8f797": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_core__fact_messages_MESSAGE_INDEX.c749e8f797", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_MESSAGE_INDEX.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_MESSAGE_INDEX", "alias": "fact_messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.9279003, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER.f672602c83": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_adc30821ca577f352288c78259fbcc94\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_adc30821ca577f352288c78259fbcc94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER.f672602c83", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_adc30821ca577f352288c78259fbcc94.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER", "alias": "fact_messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_adc30821ca577f352288c78259fbcc94.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_adc30821ca577f352288c78259fbcc94"}, "created_at": 1665500048.9303305, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_MESSAGE_TYPE.b2f6a11ab5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_core__fact_messages_MESSAGE_TYPE.b2f6a11ab5", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_MESSAGE_TYPE.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_MESSAGE_TYPE", "alias": "fact_messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.9360282, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR.a4c2f8e812": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57399d6c9d0c7098824085288624963e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57399d6c9d0c7098824085288624963e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR.a4c2f8e812", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_57399d6c9d0c7098824085288624963e.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR", "alias": "fact_messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_57399d6c9d0c7098824085288624963e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_57399d6c9d0c7098824085288624963e"}, "created_at": 1665500048.9384308, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__fact_messages"}, "test.terra.not_null_core__fact_messages_ATTRIBUTES.b929929813": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_messages_ATTRIBUTES"], "unique_id": "test.terra.not_null_core__fact_messages_ATTRIBUTES.b929929813", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_messages_ATTRIBUTES.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "not_null_core__fact_messages_ATTRIBUTES", "alias": "fact_messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/not_null_core__fact_messages_ATTRIBUTES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1665500048.9441278, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_messages\nwhere ATTRIBUTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT.81d16073fa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_235f2bcb3ce83024447bac8514a9c718\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_235f2bcb3ce83024447bac8514a9c718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT.81d16073fa", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_235f2bcb3ce83024447bac8514a9c718.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT", "alias": "fact_messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_expectations_expect_column_235f2bcb3ce83024447bac8514a9c718.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_235f2bcb3ce83024447bac8514a9c718"}, "created_at": 1665500048.9465542, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTES'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.core__fact_messages"}, "test.terra.dbt_utils_unique_combination_of_columns_core__fact_messages_message_id.fc8e077967": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_93d4ea372d6151aecd3914605f6d5368\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["message_id"], "model": "{{ get_where_subquery(ref('core__fact_messages')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_messages"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_93d4ea372d6151aecd3914605f6d5368", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__fact_messages_message_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__fact_messages_message_id.fc8e077967", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_93d4ea372d6151aecd3914605f6d5368.sql", "original_file_path": "models/core/core__fact_messages.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_messages_message_id", "alias": "fact_messages_message_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_messages.yml/dbt_utils_unique_combination_o_93d4ea372d6151aecd3914605f6d5368.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_93d4ea372d6151aecd3914605f6d5368"}, "created_at": 1665500048.95226, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        message_id\n    from TERRA_DEV.core.fact_messages\n    group by message_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.fact_messages_message_id", "column_name": null, "file_key_name": "models.core__fact_messages"}}, "sources": {"source.terra.chainwalkers.terra2_blocks": {"fqn": ["terra", "chainwalkers", "terra2_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.terra.chainwalkers.terra2_blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra2_blocks", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "terra2_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_inserted_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "Blocks from the Terra chain. Note always use the latest inserted timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The time this row was inserted into Snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.terra2_blocks", "created_at": 1665500048.957223}, "source.terra.chainwalkers.terra2_txs": {"fqn": ["terra", "chainwalkers", "terra2_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.terra.chainwalkers.terra2_txs", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra2_txs", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "terra2_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_inserted_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "Txs from the Terra chain. Note always use the latest inserted timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "A json object containing the tx and any decoded logs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The time this row was inserted into Snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.terra2_txs", "created_at": 1665500048.9574256}, "source.terra.anchor.bonds": {"fqn": ["terra", "anchor", "bonds"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.bonds", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "bonds", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "bonds", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.bonds", "created_at": 1665500048.9575598}, "source.terra.anchor.borrows": {"fqn": ["terra", "anchor", "borrows"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.borrows", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "borrows", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "borrows", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.borrows", "created_at": 1665500048.9576855}, "source.terra.anchor.burns": {"fqn": ["terra", "anchor", "burns"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.burns", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "burns", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "burns", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.burns", "created_at": 1665500048.9578104}, "source.terra.anchor.collateral": {"fqn": ["terra", "anchor", "collateral"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.collateral", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "collateral", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "collateral", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.collateral", "created_at": 1665500048.95793}, "source.terra.anchor.deposits": {"fqn": ["terra", "anchor", "deposits"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.deposits", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "deposits", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "deposits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.deposits", "created_at": 1665500048.9580483}, "source.terra.anchor.gov_staking": {"fqn": ["terra", "anchor", "gov_staking"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_staking", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_staking", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_staking", "created_at": 1665500048.9581678}, "source.terra.anchor.gov_submit_proposal": {"fqn": ["terra", "anchor", "gov_submit_proposal"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_submit_proposal", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_submit_proposal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_submit_proposal", "created_at": 1665500048.95829}, "source.terra.anchor.gov_vote": {"fqn": ["terra", "anchor", "gov_vote"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_vote", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_vote", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_vote", "created_at": 1665500048.958411}, "source.terra.anchor.liquidations": {"fqn": ["terra", "anchor", "liquidations"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.liquidations", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "liquidations", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "liquidations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.liquidations", "created_at": 1665500048.9585316}, "source.terra.anchor.redeem": {"fqn": ["terra", "anchor", "redeem"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.redeem", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "redeem", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "redeem", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.redeem", "created_at": 1665500048.958652}, "source.terra.anchor.repay": {"fqn": ["terra", "anchor", "repay"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.repay", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "repay", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "repay", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.repay", "created_at": 1665500048.9587717}, "source.terra.anchor.reward_claims": {"fqn": ["terra", "anchor", "reward_claims"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.reward_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "reward_claims", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "reward_claims", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.reward_claims", "created_at": 1665500048.9588885}, "source.terra.astroport.pool_reserves": {"fqn": ["terra", "astroport", "pool_reserves"], "database": "flipside_prod_db", "schema": "astroport", "unique_id": "source.terra.astroport.pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "pool_reserves", "source_name": "astroport", "source_description": "", "loader": "", "identifier": "pool_reserves", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.astroport.pool_reserves", "created_at": 1665500048.9590054}, "source.terra.astroport.swaps": {"fqn": ["terra", "astroport", "swaps"], "database": "flipside_prod_db", "schema": "astroport", "unique_id": "source.terra.astroport.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "astroport", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.astroport.swaps", "created_at": 1665500048.9591222}, "source.terra.gold.terra_address_labels": {"fqn": ["terra", "gold", "terra_address_labels"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_address_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_address_labels", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_address_labels", "created_at": 1665500048.9592578}, "source.terra.gold.terra_address_tags": {"fqn": ["terra", "gold", "terra_address_tags"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_address_tags", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_address_tags", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_address_tags", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_address_tags", "created_at": 1665500048.9593778}, "source.terra.gold.terra_daily_balances": {"fqn": ["terra", "gold", "terra_daily_balances"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_daily_balances", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_daily_balances", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_daily_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_daily_balances", "created_at": 1665500048.9594965}, "source.terra.gold.terra_prices": {"fqn": ["terra", "gold", "terra_prices"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_prices", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_prices", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_prices", "created_at": 1665500048.9596133}, "source.terra.terra.airdrop_claims": {"fqn": ["terra", "terra", "airdrop_claims"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.airdrop_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "airdrop_claims", "source_name": "terra", "source_description": "", "loader": "", "identifier": "airdrop_claims", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.airdrop_claims", "created_at": 1665500048.9597328}, "source.terra.terra.daily_balances": {"fqn": ["terra", "terra", "daily_balances"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.daily_balances", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "daily_balances", "source_name": "terra", "source_description": "", "loader": "", "identifier": "daily_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.daily_balances", "created_at": 1665500048.9598513}, "source.terra.terra.gov_submit_proposal": {"fqn": ["terra", "terra", "gov_submit_proposal"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_submit_proposal", "source_name": "terra", "source_description": "", "loader": "", "identifier": "gov_submit_proposal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.gov_submit_proposal", "created_at": 1665500048.9599683}, "source.terra.terra.gov_vote": {"fqn": ["terra", "terra", "gov_vote"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_vote", "source_name": "terra", "source_description": "", "loader": "", "identifier": "gov_vote", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.gov_vote", "created_at": 1665500048.960084}, "source.terra.terra.nft_metadata": {"fqn": ["terra", "terra", "nft_metadata"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.nft_metadata", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "nft_metadata", "source_name": "terra", "source_description": "", "loader": "", "identifier": "nft_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.nft_metadata", "created_at": 1665500048.9602003}, "source.terra.terra.oracle_prices": {"fqn": ["terra", "terra", "oracle_prices"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.oracle_prices", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "oracle_prices", "source_name": "terra", "source_description": "", "loader": "", "identifier": "oracle_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.oracle_prices", "created_at": 1665500048.9603188}, "source.terra.terra.reward": {"fqn": ["terra", "terra", "reward"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.reward", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "reward", "source_name": "terra", "source_description": "", "loader": "", "identifier": "reward", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.reward", "created_at": 1665500048.9604354}, "source.terra.terra.staking": {"fqn": ["terra", "terra", "staking"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "staking", "source_name": "terra", "source_description": "", "loader": "", "identifier": "staking", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.staking", "created_at": 1665500048.9605517}, "source.terra.terra.swaps": {"fqn": ["terra", "terra", "swaps"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "terra", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.swaps", "created_at": 1665500048.9606678}, "source.terra.terra.tax_rate": {"fqn": ["terra", "terra", "tax_rate"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.tax_rate", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "tax_rate", "source_name": "terra", "source_description": "", "loader": "", "identifier": "tax_rate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.tax_rate", "created_at": 1665500048.9607847}, "source.terra.terra.transfers": {"fqn": ["terra", "terra", "transfers"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.transfers", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transfers", "source_name": "terra", "source_description": "", "loader": "", "identifier": "transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.transfers", "created_at": 1665500048.9609034}, "source.terra.terra.validator_labels": {"fqn": ["terra", "terra", "validator_labels"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.validator_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "validator_labels", "source_name": "terra", "source_description": "", "loader": "", "identifier": "validator_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.validator_labels", "created_at": 1665500048.961021}, "source.terra.terra.validator_voting_power": {"fqn": ["terra", "terra", "validator_voting_power"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.validator_voting_power", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "validator_voting_power", "source_name": "terra", "source_description": "", "loader": "", "identifier": "validator_voting_power", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.validator_voting_power", "created_at": 1665500048.96114}, "source.terra.terraswap.lp_actions": {"fqn": ["terra", "terraswap", "lp_actions"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.lp_actions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "lp_actions", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "lp_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.lp_actions", "created_at": 1665500048.9612584}, "source.terra.terraswap.lp_stake": {"fqn": ["terra", "terraswap", "lp_stake"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.lp_stake", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "lp_stake", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "lp_stake", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.lp_stake", "created_at": 1665500048.961459}, "source.terra.terraswap.pool_reserves": {"fqn": ["terra", "terraswap", "pool_reserves"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "pool_reserves", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "pool_reserves", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.pool_reserves", "created_at": 1665500048.9615812}, "source.terra.terraswap.swaps": {"fqn": ["terra", "terraswap", "swaps"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.swaps", "created_at": 1665500048.9617007}, "source.terra.terra_sv.blocks": {"fqn": ["terra", "terra_sv", "blocks"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "blocks", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.blocks", "created_at": 1665500048.9618192}, "source.terra.terra_sv.labels": {"fqn": ["terra", "terra_sv", "labels"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "labels", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.labels", "created_at": 1665500048.9619372}, "source.terra.terra_sv.msgs": {"fqn": ["terra", "terra_sv", "msgs"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.msgs", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "msgs", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "msgs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.msgs", "created_at": 1665500048.9620528}, "source.terra.terra_sv.msg_events": {"fqn": ["terra", "terra_sv", "msg_events"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.msg_events", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "msg_events", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "msg_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.msg_events", "created_at": 1665500048.9621692}, "source.terra.terra_sv.transactions": {"fqn": ["terra", "terra_sv", "transactions"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transactions", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.transactions", "created_at": 1665500048.9622858}, "source.terra.terra_sv.transitions": {"fqn": ["terra", "terra_sv", "transitions"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.transitions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transitions", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "transitions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.transitions", "created_at": 1665500048.9624023}, "source.terra.labels.address_labels": {"fqn": ["terra", "labels", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.terra.labels.address_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "labels", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1665500048.9625196}}, "macros": {"macro.terra.run_sp_create_prod_clone": {"unique_id": "macro.terra.run_sp_create_prod_clone", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call terra._internal.create_prod_clone(\n        'terra',\n        'terra_dev',\n        'dbt_cloud'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2000506}, "macro.terra.incremental_load_filter": {"unique_id": "macro.terra.incremental_load_filter", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter", "macro_sql": "{% macro incremental_load_filter(time_col) -%}\n  -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n\n{% if is_incremental() %}\n{{ time_col }} >= (\n  SELECT\n    MAX(\n      {{ time_col }}\n    )\n  FROM\n    {{ this }}\n)\n{%- else -%}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2014623}, "macro.terra.incremental_last_x_days": {"unique_id": "macro.terra.incremental_last_x_days", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_last_x_days", "macro_sql": "{% macro incremental_last_x_days(\n    time_col,\n    time_in_days\n  ) -%}\n\n{% if is_incremental() %}\n{{ time_col }} >= CURRENT_DATE() - INTERVAL '{{ time_in_days }} day'\n{% else %}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.202001}, "macro.terra.generate_schema_name": {"unique_id": "macro.terra.generate_schema_name", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2033832}, "macro.terra.generate_alias_name": {"unique_id": "macro.terra.generate_alias_name", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.204143}, "macro.terra.sp_create_prod_clone": {"unique_id": "macro.terra.sp_create_prod_clone", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1)\n            var function_name = existing_functions.getColumnValue(2)\n            var argument_signature = existing_functions.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1)\n            var procedure_name = existing_procedures.getColumnValue(2)\n            var argument_signature = existing_procedures.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\n\n        while (existing_tasks.next()) {\n            var schema = existing_tasks.getColumnValue(5)\n            var task_name = existing_tasks.getColumnValue(2)\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2058744}, "macro.terra.create_sps": {"unique_id": "macro.terra.create_sps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'TERRA' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.terra.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2067974}, "macro.terra.test_tx_gaps": {"unique_id": "macro.terra.test_tx_gaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "test_tx_gaps", "macro_sql": "{% test tx_gaps(\n    model,\n    column_name,\n    column_block,\n    column_tx_count\n) %}\nWITH block_base AS (\n    SELECT\n        {{ column_block }},\n        {{ column_tx_count }}\n    FROM\n        {{ ref('silver__blocks') }}\n),\nmodel_name AS (\n    SELECT\n        {{ column_block }},\n        COUNT(\n            DISTINCT {{ column_name }}\n        ) AS model_tx_count\n    FROM\n        {{ model }}\n    GROUP BY\n        {{ column_block }}\n)\nSELECT\n    block_base.{{ column_block }},\n    {{ column_tx_count }},\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.{{ column_block }} = model_name.{{ column_block }}\nWHERE\n    {{ column_tx_count }} <> model_tx_count {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2086337}, "macro.terra.test_sequence_gaps": {"unique_id": "macro.terra.test_sequence_gaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        block_timestamp,\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    block_timestamp,\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2111976}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2364957}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2385445}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2392838}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.241229}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2432206}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.244649}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2459478}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2467716}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2469652}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2474272}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.247693}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2481894}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.248842}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2493649}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2506661}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.251141}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2515612}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2527964}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2532604}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2545347}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2569625}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.257522}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2581468}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.258649}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2589223}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.261068}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2618008}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2624855}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2632968}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2638814}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.26816}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.271191}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.271928}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2725856}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2759233}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.277292}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2832537}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.288467}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2892327}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2903852}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2919776}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.295718}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.2988224}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3007357}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.301319}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.304149}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3056257}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.306374}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3078067}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3084867}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3092113}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3103642}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3109565}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3121364}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3127916}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3136725}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.314795}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.315853}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3174531}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.318417}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.318768}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3197088}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.320045}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3209572}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3213196}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.322384}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.322819}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.323781}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3241456}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3254938}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.325922}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.326511}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.32758}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.328265}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3286452}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.329621}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3300998}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3309214}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3311162}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3319378}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3321292}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.332978}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.333248}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3340685}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3343394}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.335378}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3358047}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3366854}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3369608}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3377945}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.338208}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3390594}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3394911}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3403523}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3406858}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3422506}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3434815}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3445625}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3449845}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3458366}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3460999}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3481977}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3485985}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3490078}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.349394}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.349799}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3501742}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3505707}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3510132}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3514256}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3518012}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.352203}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3525627}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.356153}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.356468}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.357033}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3573222}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.358208}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3586793}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3589392}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3595254}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3600023}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3605742}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.361053}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3616266}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.363351}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3638318}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3644607}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3650348}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3681276}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3694713}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.369825}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3702233}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3712656}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3775303}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3779602}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3785212}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3792727}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3798904}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3807006}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3811586}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3817067}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3821526}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3825638}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3830729}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3838127}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3844407}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3859792}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.386552}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3869073}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3874035}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.388556}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3890352}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.389441}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.389902}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.391168}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.391555}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.392142}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3932254}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.394917}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.395369}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3958912}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3963227}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3969953}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.3982341}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4016378}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.402054}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4028606}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4034622}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4043443}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4049206}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4064577}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4070933}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.409142}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.412265}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.412937}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4134007}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4138012}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.414256}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.414888}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.415419}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4161892}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4166582}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4170718}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4182057}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4190037}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4198074}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4227507}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4232678}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4236453}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.424007}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4243624}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4321022}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.44066}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4429836}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.443583}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.44484}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4453316}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.445678}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4460268}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4463134}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.446709}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4469993}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4482245}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4486845}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4519813}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.458222}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.459518}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4599972}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4605112}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4615543}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4626389}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4630432}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4635136}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4641774}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4680223}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4690108}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4695745}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4757998}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4778972}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4793165}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4808676}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4897523}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4936047}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4942014}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4961472}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4968188}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.4984298}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5094092}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.511239}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5198374}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5229769}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.526095}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5279365}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.529086}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5300822}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5313404}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.532131}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5372825}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.544708}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.545148}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.545733}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.546092}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5463428}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5483298}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5487447}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5491686}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5526643}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5560362}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5629463}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5637207}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5641596}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.56439}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.564758}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5650487}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5655637}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.567786}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.568258}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5689201}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.570033}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5830054}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5842783}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5849676}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.586383}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.586976}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5877113}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5884125}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5907192}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5925887}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.5942953}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6083086}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6140852}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dateadd('day', '-1', dateadd('month', '3', date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6197934}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6229298}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.624278}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6262276}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6269608}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6280966}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6294096}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.629948}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6302986}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6306455}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.632002}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6323419}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6328468}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6333535}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6341498}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6350362}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.635937}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6373186}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.637709}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6380649}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6385365}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6388836}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6401856}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6406436}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6410036}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6417034}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6432328}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6437562}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6442776}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6447885}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.645305}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.646213}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6475883}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6479495}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6486762}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dateadd('day', -1, date_trunc('week', dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6492653}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6499822}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.650972}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6513493}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6517067}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6521587}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.655757}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.656519}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.65756}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6583023}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6593714}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6602798}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.661172}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6624868}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6630096}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6635354}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6640375}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6645522}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6653914}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6679726}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6686535}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6693249}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.670535}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6716962}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6732168}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6736982}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6740632}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6744094}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6747758}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6756465}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6767702}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6777136}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6780581}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6783993}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6791108}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6818094}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.682652}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6830597}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.683494}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6843028}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6847746}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6855946}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6863756}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6869676}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6880677}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6890118}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6893644}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6897144}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6899824}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6912618}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6919897}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.693054}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_date.current_timestamp(), tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_date.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6940355}, "macro.dbt_date.current_timestamp": {"unique_id": "macro.dbt_date.current_timestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_date')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6944485}, "macro.dbt_date.default__current_timestamp": {"unique_id": "macro.dbt_date.default__current_timestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6947234}, "macro.dbt_date.redshift__current_timestamp": {"unique_id": "macro.dbt_date.redshift__current_timestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6949077}, "macro.dbt_date.bigquery__current_timestamp": {"unique_id": "macro.dbt_date.bigquery__current_timestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6950889}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6961608}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6970403}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6981995}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.6999009}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7016084}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7038112}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7061064}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.706825}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7082977}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7104104}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7154908}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7234359}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7271612}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7323048}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7348247}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7387192}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7412581}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7434785}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7445085}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7453983}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7482197}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7493954}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7505546}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7510471}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7521598}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.752516}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7528627}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7545261}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7568748}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7584496}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7608118}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.761772}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7624083}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7636008}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7643416}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7656457}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7675257}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7694435}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7705112}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7709942}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7723703}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7741067}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7756402}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7762408}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7771482}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7804644}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.781543}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7834299}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7847474}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.785996}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.786704}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7921612}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7927344}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.793248}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.793743}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7941709}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7946088}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7964547}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.7990108}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8004785}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.800823}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8015413}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8018806}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8021388}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8039594}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8042264}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8044095}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8045902}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8055878}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8058968}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8062527}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.806512}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8068395}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8082905}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8086438}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.808977}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8093078}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.810681}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8110218}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8114974}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8119543}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8136806}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8143156}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.814676}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8150265}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8153942}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8164241}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8172035}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8181787}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.819065}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8208246}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8215055}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.821916}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8225863}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8229883}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8236651}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8240664}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8247263}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8251193}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8257737}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8261704}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8268218}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8278341}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8285668}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.829937}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8302045}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8304627}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8315642}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8325546}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8335588}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8343344}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8354344}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.836277}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.837276}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8380523}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.839024}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8398051}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8406832}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8413596}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8422134}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8428876}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.844148}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.844787}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8457026}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8464038}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8473387}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8480473}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8490832}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8500223}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8509548}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8516698}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8525696}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8532507}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8541527}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.854857}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8557632}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.856463}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8576927}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8586516}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8597152}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8605497}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8614664}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8621671}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8634949}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8644001}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8648489}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8657305}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8662686}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.867697}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8686254}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8691196}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8713667}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.882457}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8837585}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8845634}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.8858862}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.899243}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.900922}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.902588}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.908688}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9127119}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9140813}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9146502}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9160159}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9167786}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9179058}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9186597}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9200797}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.920921}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9221091}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.92345}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9244678}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.924918}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9261775}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9266098}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9278493}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.928401}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9300408}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9309158}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9321034}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9329019}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.934508}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9357412}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9373991}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9389503}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.940809}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.943054}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.944548}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9455473}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9465904}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9470437}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9481091}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9491866}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.950194}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.951115}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9523902}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9538887}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9548614}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9551485}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9554152}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.955679}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9564126}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.957337}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9575274}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9577124}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.95792}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9581025}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9582827}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9595258}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9600592}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9605927}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9616916}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9618826}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9620738}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9623919}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9627907}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9629717}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.963165}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.963347}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.965013}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9655235}, "macro.dbt_expectations.snowflake__regexp_instr": {"unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9663188}, "macro.dbt_expectations.bigquery__regexp_instr": {"unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9671023}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9675236}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9680314}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9748287}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9762516}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_utils.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dateadd(period, -test_periods, date_trunc(period, dbt_date.now())) }}\n            as {{ type_timestamp() }})\n    and\n    metric_period < {{ date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9801252}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.982219}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9836411}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ type_int() }}),\n            cast({{interval}} as {{ type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9926085}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9959912}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.9968507}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500046.998085}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.000333}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0021386}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0050282}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0076888}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.008905}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.010158}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0110328}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0133104}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0155036}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0173843}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.019221}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.021276}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0245225}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0265505}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0288272}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.030699}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0331986}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0341763}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0360608}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0379326}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0395546}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0411856}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.043177}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "name": "test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0448158}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.046835}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.048818}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0510404}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.053005}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0537386}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0551639}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0588512}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.060033}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.061224}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0634902}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ type_timestamp() }}))\n        <\n        cast({{ dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0649905}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0680232}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0708659}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0726175}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0751548}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0762153}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.077492}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.078677}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.081645}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0845678}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0883214}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0900643}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.092456}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0944788}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.096655}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.097399}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0990095}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.0998795}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1001477}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1085198}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1099787}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.111186}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1144507}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1160908}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1196554}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.123231}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1296272}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1313887}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1344519}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1365895}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.138979}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1414144}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1427922}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1444302}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.146269}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1471667}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.148566}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1499505}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1515746}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1540282}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665500047.1564682}}, "docs": {"terra.block_hash": {"unique_id": "terra.block_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_hash.md", "original_file_path": "models/descriptions/block_hash.md", "name": "block_hash", "block_contents": "Unique identifier (hash) of this block."}, "terra.memo": {"unique_id": "terra.memo", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/memo.md", "original_file_path": "models/descriptions/memo.md", "name": "memo", "block_contents": "The memo, if any, attached to this transaction."}, "terra.attributes": {"unique_id": "terra.attributes", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/attributes.md", "original_file_path": "models/descriptions/attributes.md", "name": "attributes", "block_contents": "The messages and message events attributes"}, "terra.gas_limit": {"unique_id": "terra.gas_limit", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/gas_limit.md", "original_file_path": "models/descriptions/gas_limit.md", "name": "gas_limit", "block_contents": "The max gas limit attached to this transaction."}, "terra.last_block_id": {"unique_id": "terra.last_block_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_block_id.md", "original_file_path": "models/descriptions/last_block_id.md", "name": "last_block_id", "block_contents": "The last block id taken from the block header."}, "terra.message_type": {"unique_id": "terra.message_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_type.md", "original_file_path": "models/descriptions/message_type.md", "name": "message_type", "block_contents": "The type of the message"}, "terra.next_validators_hash": {"unique_id": "terra.next_validators_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/next_validators_hash.md", "original_file_path": "models/descriptions/next_validators_hash.md", "name": "next_validators_hash", "block_contents": "The next validators hash taken from the block header."}, "terra.auth_type": {"unique_id": "terra.auth_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/auth_type.md", "original_file_path": "models/descriptions/auth_type.md", "name": "auth_type", "block_contents": "What type of authorization was used, presently single or multi."}, "terra.block_id": {"unique_id": "terra.block_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "The height of the chain this block corresponds with."}, "terra.message_id": {"unique_id": "terra.message_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_id.md", "original_file_path": "models/descriptions/message_id.md", "name": "message_id", "block_contents": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index."}, "terra.last_commit_hash": {"unique_id": "terra.last_commit_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_commit_hash.md", "original_file_path": "models/descriptions/last_commit_hash.md", "name": "last_commit_hash", "block_contents": "The last commit hash gotten from the block header"}, "terra.fee": {"unique_id": "terra.fee", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee.md", "original_file_path": "models/descriptions/fee.md", "name": "fee", "block_contents": "The transaction fee attached to the transaction, decimal adjusted."}, "terra.fee_raw": {"unique_id": "terra.fee_raw", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee_raw.md", "original_file_path": "models/descriptions/fee_raw.md", "name": "fee_raw", "block_contents": "The transaction fee attached to the transaction, not decimal adjusted."}, "terra.tx_count": {"unique_id": "terra.tx_count", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "name": "tx_count", "block_contents": "The number of transaction on a block"}, "terra.gas_used": {"unique_id": "terra.gas_used", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/gas_used.md", "original_file_path": "models/descriptions/gas_used.md", "name": "gas_used", "block_contents": "The gas actually used by this transaction."}, "terra.evidence_hash": {"unique_id": "terra.evidence_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/evidence_hash.md", "original_file_path": "models/descriptions/evidence_hash.md", "name": "evidence_hash", "block_contents": "The evidence hash gotten from the block header"}, "terra.chain_id": {"unique_id": "terra.chain_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/chain_id.md", "original_file_path": "models/descriptions/chain_id.md", "name": "chain_id", "block_contents": "The chain id gotten from the block header"}, "terra.tx_id": {"unique_id": "terra.tx_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "Transaction hash for the record."}, "terra.tx_code": {"unique_id": "terra.tx_code", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_code.md", "original_file_path": "models/descriptions/tx_code.md", "name": "tx_code", "block_contents": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed."}, "terra.codespace": {"unique_id": "terra.codespace", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/codespace.md", "original_file_path": "models/descriptions/codespace.md", "name": "codespace", "block_contents": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace"}, "terra.proposer_address": {"unique_id": "terra.proposer_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/proposer_address.md", "original_file_path": "models/descriptions/proposer_address.md", "name": "proposer_address", "block_contents": "The proposer address taken from the block header."}, "terra._inserted_timestamp": {"unique_id": "terra._inserted_timestamp", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/_inserted_timestamp.md", "original_file_path": "models/descriptions/_inserted_timestamp.md", "name": "_inserted_timestamp", "block_contents": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker."}, "terra.evidence": {"unique_id": "terra.evidence", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/evidence.md", "original_file_path": "models/descriptions/evidence.md", "name": "evidence", "block_contents": "The evidence gotten from the block header"}, "terra._ingested_at": {"unique_id": "terra._ingested_at", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/_ingested_at.md", "original_file_path": "models/descriptions/_ingested_at.md", "name": "_ingested_at", "block_contents": "The timestamp for when the block was ingested."}, "terra.fee_denom": {"unique_id": "terra.fee_denom", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee_denom.md", "original_file_path": "models/descriptions/fee_denom.md", "name": "fee_denom", "block_contents": "The token the transaction fee is paid in."}, "terra.tx_sender": {"unique_id": "terra.tx_sender", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_sender.md", "original_file_path": "models/descriptions/tx_sender.md", "name": "tx_sender", "block_contents": "The address of the sender, or authorizer, of this transaction."}, "terra.authorizer_public_key": {"unique_id": "terra.authorizer_public_key", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/authorizer_public_key.md", "original_file_path": "models/descriptions/authorizer_public_key.md", "name": "authorizer_public_key", "block_contents": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/"}, "terra.message_index": {"unique_id": "terra.message_index", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_index.md", "original_file_path": "models/descriptions/message_index.md", "name": "message_index", "block_contents": "The index of the messages"}, "terra.data_hash": {"unique_id": "terra.data_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/data_hash.md", "original_file_path": "models/descriptions/data_hash.md", "name": "data_hash", "block_contents": "The data hash gotten from the block header"}, "terra.consensus_hash": {"unique_id": "terra.consensus_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/consensus_hash.md", "original_file_path": "models/descriptions/consensus_hash.md", "name": "consensus_hash", "block_contents": "The consensus hash gotten from the block header"}, "terra.validators_hash": {"unique_id": "terra.validators_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/validators_hash.md", "original_file_path": "models/descriptions/validators_hash.md", "name": "validators_hash", "block_contents": "The validators hash taken from the block header."}, "terra.tx": {"unique_id": "terra.tx", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx.md", "original_file_path": "models/descriptions/tx.md", "name": "tx", "block_contents": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction."}, "terra.last_results_hash": {"unique_id": "terra.last_results_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_results_hash.md", "original_file_path": "models/descriptions/last_results_hash.md", "name": "last_results_hash", "block_contents": "The last results hash taken from the block header."}, "terra.block_timestamp": {"unique_id": "terra.block_timestamp", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "terra.last_commit": {"unique_id": "terra.last_commit", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_commit.md", "original_file_path": "models/descriptions/last_commit.md", "name": "last_commit", "block_contents": "The last commit gotten from the block header"}, "terra.tx_succeeded": {"unique_id": "terra.tx_succeeded", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "name": "tx_succeeded", "block_contents": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure."}, "terra.block_height": {"unique_id": "terra.block_height", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_height.md", "original_file_path": "models/descriptions/block_height.md", "name": "block_height", "block_contents": "The block height is a sequential number of the most recent block in the blockchain."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.terra.bronze__blocks": ["source.terra.chainwalkers.terra2_blocks"], "model.terra.bronze__transactions": ["source.terra.chainwalkers.terra2_txs"], "model.terra.classic__dim_labels": ["source.terra.terra_sv.labels"], "model.terra.classic__dim_validator_labels": ["source.terra.terra.validator_labels"], "model.terra.classic__dim_oracle_prices": ["source.terra.terra.oracle_prices"], "model.terra.classic__ez_anchor_deposits": ["source.terra.anchor.deposits"], "model.terra.classic__ez_anchor_liquidations": ["source.terra.anchor.liquidations"], "model.terra.classic__dim_astroport_pool_reserves": ["source.terra.astroport.pool_reserves"], "model.terra.classic__ez_gov_vote": ["source.terra.terra.gov_vote"], "model.terra.classic__ez_anchor_bonds": ["source.terra.anchor.bonds"], "model.terra.classic__ez_anchor_borrows": ["source.terra.anchor.borrows"], "model.terra.classic__ez_anchor_burns": ["source.terra.anchor.burns"], "model.terra.classic__ez_terraswap_lp_stake": ["source.terra.terraswap.lp_stake"], "model.terra.classic__ez_transfers": ["source.terra.terra.transfers"], "model.terra.classic__fact_transitions": ["source.terra.terra_sv.transitions"], "model.terra.classic__ez_staking": ["source.terra.terra.staking"], "model.terra.classic__fact_transactions": ["source.terra.terra_sv.transactions"], "model.terra.classic__ez_gov_submit_proposal": ["source.terra.terra.gov_submit_proposal"], "model.terra.classic__ez_anchor_redeem": ["source.terra.anchor.redeem"], "model.terra.classic__ez_astroport_swaps": ["source.terra.astroport.swaps"], "model.terra.classic__ez_anchor_repay": ["source.terra.anchor.repay"], "model.terra.classic__ez_airdrop_claims": ["source.terra.terra.airdrop_claims"], "model.terra.classic__ez_swaps": ["source.terra.terra.swaps"], "model.terra.classic__ez_reward": ["source.terra.terra.reward"], "model.terra.classic__ez_anchor_collateral": ["source.terra.anchor.collateral"], "model.terra.classic__ez_terraswap_lp_actions": ["source.terra.terraswap.lp_actions"], "model.terra.classic__fact_blocks": ["source.terra.terra_sv.blocks"], "model.terra.classic__ez_terraswap_swaps": ["source.terra.terraswap.swaps"], "model.terra.classic__ez_anchor_gov_submit_proposal": ["source.terra.anchor.gov_submit_proposal"], "model.terra.classic__ez_anchor_reward_claims": ["source.terra.anchor.reward_claims"], "model.terra.classic__dim_nft_metadata": ["source.terra.terra.nft_metadata"], "model.terra.classic__fact_messages": ["source.terra.terra_sv.msgs"], "model.terra.classic__ez_anchor_gov_staking": ["source.terra.anchor.gov_staking"], "model.terra.classic__dim_tax_rate": ["source.terra.terra.tax_rate"], "model.terra.classic__ez_anchor_gov_vote": ["source.terra.anchor.gov_vote"], "model.terra.classic__fact_message_events": ["source.terra.terra_sv.msg_events"], "model.terra.classic__dim_terraswap_pool_reserves": ["source.terra.terraswap.pool_reserves"], "model.terra.classic__dim_daily_balances": ["source.terra.terra.daily_balances"], "model.terra.classic__dim_validator_voting_power": ["source.terra.terra.validator_voting_power"], "model.terra.silver__messages": ["model.terra.silver__blocks", "model.terra.silver__transactions"], "model.terra.silver__transactions": ["model.terra.bronze__transactions"], "model.terra.silver__blocks": ["model.terra.bronze__blocks"], "model.terra.core__dim_address_labels": ["source.terra.labels.address_labels"], "model.terra.core__fact_messages": ["model.terra.silver__messages"], "model.terra.core__fact_blocks": ["model.terra.silver__blocks"], "model.terra.core__fact_transactions": ["model.terra.silver__transactions"], "operation.terra.terra-on-run-start-0": [], "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": ["model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": ["model.terra.silver__transactions"], "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": ["model.terra.silver__blocks"], "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": ["model.terra.silver__blocks"], "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_TX_ID.084bc612c0": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": ["model.terra.silver__messages"], "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": ["model.terra.silver__messages"], "test.terra.not_null_core__fact_transactions_tx_id.dd94c1ac9e": ["model.terra.core__fact_transactions"], "test.terra.unique_core__fact_transactions_tx_id.211ea20522": ["model.terra.core__fact_transactions"], "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c": ["model.terra.core__fact_transactions", "model.terra.silver__blocks"], "test.terra.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_block_id.fbece8facc": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER.c3f16750e8": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_auth_type.c3ff76f78a": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_authorizer_public_key.fc6ae8130d": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_gas_limit.c3fb97a749": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_gas_used.7811982ae3": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_tx_code.252c0f2788": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER.e10ec974e5": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_tx_succeeded.85fd90691c": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_tx.56e7355817": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": ["model.terra.core__fact_blocks"], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": ["model.terra.core__fact_blocks"], "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_messages_MESSAGE_ID.87c372bdf2": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR.673ee9328a": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_BLOCK_ID.c804aac939": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT.554b696b59": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_BLOCK_TIMESTAMP.43d3414c7d": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2c0ae10d10": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_TX_ID.e208fdbc3b": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR.9a21b40e4c": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_tx_succeeded.2fb92a20bf": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN.8755b673e0": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_CHAIN_ID.b77c0e6e30": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR.b75726d6bf": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_MESSAGE_INDEX.c749e8f797": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER.f672602c83": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_MESSAGE_TYPE.b2f6a11ab5": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR.a4c2f8e812": ["model.terra.core__fact_messages"], "test.terra.not_null_core__fact_messages_ATTRIBUTES.b929929813": ["model.terra.core__fact_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT.81d16073fa": ["model.terra.core__fact_messages"], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_messages_message_id.fc8e077967": ["model.terra.core__fact_messages"], "source.terra.chainwalkers.terra2_blocks": [], "source.terra.chainwalkers.terra2_txs": [], "source.terra.anchor.bonds": [], "source.terra.anchor.borrows": [], "source.terra.anchor.burns": [], "source.terra.anchor.collateral": [], "source.terra.anchor.deposits": [], "source.terra.anchor.gov_staking": [], "source.terra.anchor.gov_submit_proposal": [], "source.terra.anchor.gov_vote": [], "source.terra.anchor.liquidations": [], "source.terra.anchor.redeem": [], "source.terra.anchor.repay": [], "source.terra.anchor.reward_claims": [], "source.terra.astroport.pool_reserves": [], "source.terra.astroport.swaps": [], "source.terra.gold.terra_address_labels": [], "source.terra.gold.terra_address_tags": [], "source.terra.gold.terra_daily_balances": [], "source.terra.gold.terra_prices": [], "source.terra.terra.airdrop_claims": [], "source.terra.terra.daily_balances": [], "source.terra.terra.gov_submit_proposal": [], "source.terra.terra.gov_vote": [], "source.terra.terra.nft_metadata": [], "source.terra.terra.oracle_prices": [], "source.terra.terra.reward": [], "source.terra.terra.staking": [], "source.terra.terra.swaps": [], "source.terra.terra.tax_rate": [], "source.terra.terra.transfers": [], "source.terra.terra.validator_labels": [], "source.terra.terra.validator_voting_power": [], "source.terra.terraswap.lp_actions": [], "source.terra.terraswap.lp_stake": [], "source.terra.terraswap.pool_reserves": [], "source.terra.terraswap.swaps": [], "source.terra.terra_sv.blocks": [], "source.terra.terra_sv.labels": [], "source.terra.terra_sv.msgs": [], "source.terra.terra_sv.msg_events": [], "source.terra.terra_sv.transactions": [], "source.terra.terra_sv.transitions": [], "source.terra.labels.address_labels": []}, "child_map": {"model.terra.bronze__blocks": ["model.terra.silver__blocks"], "model.terra.bronze__transactions": ["model.terra.silver__transactions"], "model.terra.classic__dim_labels": [], "model.terra.classic__dim_validator_labels": [], "model.terra.classic__dim_oracle_prices": [], "model.terra.classic__ez_anchor_deposits": [], "model.terra.classic__ez_anchor_liquidations": [], "model.terra.classic__dim_astroport_pool_reserves": [], "model.terra.classic__ez_gov_vote": [], "model.terra.classic__ez_anchor_bonds": [], "model.terra.classic__ez_anchor_borrows": [], "model.terra.classic__ez_anchor_burns": [], "model.terra.classic__ez_terraswap_lp_stake": [], "model.terra.classic__ez_transfers": [], "model.terra.classic__fact_transitions": [], "model.terra.classic__ez_staking": [], "model.terra.classic__fact_transactions": [], "model.terra.classic__ez_gov_submit_proposal": [], "model.terra.classic__ez_anchor_redeem": [], "model.terra.classic__ez_astroport_swaps": [], "model.terra.classic__ez_anchor_repay": [], "model.terra.classic__ez_airdrop_claims": [], "model.terra.classic__ez_swaps": [], "model.terra.classic__ez_reward": [], "model.terra.classic__ez_anchor_collateral": [], "model.terra.classic__ez_terraswap_lp_actions": [], "model.terra.classic__fact_blocks": [], "model.terra.classic__ez_terraswap_swaps": [], "model.terra.classic__ez_anchor_gov_submit_proposal": [], "model.terra.classic__ez_anchor_reward_claims": [], "model.terra.classic__dim_nft_metadata": [], "model.terra.classic__fact_messages": [], "model.terra.classic__ez_anchor_gov_staking": [], "model.terra.classic__dim_tax_rate": [], "model.terra.classic__ez_anchor_gov_vote": [], "model.terra.classic__fact_message_events": [], "model.terra.classic__dim_terraswap_pool_reserves": [], "model.terra.classic__dim_daily_balances": [], "model.terra.classic__dim_validator_voting_power": [], "model.terra.silver__messages": ["model.terra.core__fact_messages", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9", "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d", "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4", "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76", "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06", "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed", "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520", "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755", "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd", "test.terra.not_null_silver__messages_TX_ID.084bc612c0", "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d", "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d"], "model.terra.silver__transactions": ["model.terra.core__fact_transactions", "model.terra.silver__messages", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57", "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7"], "model.terra.silver__blocks": ["model.terra.core__fact_blocks", "model.terra.silver__messages", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101", "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa", "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470", "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4", "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726", "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b", "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9", "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6", "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678", "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312", "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c"], "model.terra.core__dim_address_labels": [], "model.terra.core__fact_messages": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT.81d16073fa", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT.554b696b59", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2c0ae10d10", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR.b75726d6bf", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR.673ee9328a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER.f672602c83", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR.a4c2f8e812", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR.9a21b40e4c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN.8755b673e0", "test.terra.dbt_utils_unique_combination_of_columns_core__fact_messages_message_id.fc8e077967", "test.terra.not_null_core__fact_messages_ATTRIBUTES.b929929813", "test.terra.not_null_core__fact_messages_BLOCK_ID.c804aac939", "test.terra.not_null_core__fact_messages_BLOCK_TIMESTAMP.43d3414c7d", "test.terra.not_null_core__fact_messages_CHAIN_ID.b77c0e6e30", "test.terra.not_null_core__fact_messages_MESSAGE_ID.87c372bdf2", "test.terra.not_null_core__fact_messages_MESSAGE_INDEX.c749e8f797", "test.terra.not_null_core__fact_messages_MESSAGE_TYPE.b2f6a11ab5", "test.terra.not_null_core__fact_messages_TX_ID.e208fdbc3b", "test.terra.not_null_core__fact_messages_tx_succeeded.2fb92a20bf"], "model.terra.core__fact_blocks": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c", "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390", "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d", "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2", "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43", "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15", "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3", "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3", "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce", "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a", "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c", "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707", "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d", "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e"], "model.terra.core__fact_transactions": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER.c3f16750e8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER.e10ec974e5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2", "test.terra.not_null_core__fact_transactions_auth_type.c3ff76f78a", "test.terra.not_null_core__fact_transactions_authorizer_public_key.fc6ae8130d", "test.terra.not_null_core__fact_transactions_block_id.fbece8facc", "test.terra.not_null_core__fact_transactions_block_timestamp.32cc47fbb2", "test.terra.not_null_core__fact_transactions_gas_limit.c3fb97a749", "test.terra.not_null_core__fact_transactions_gas_used.7811982ae3", "test.terra.not_null_core__fact_transactions_tx.56e7355817", "test.terra.not_null_core__fact_transactions_tx_code.252c0f2788", "test.terra.not_null_core__fact_transactions_tx_id.dd94c1ac9e", "test.terra.not_null_core__fact_transactions_tx_succeeded.85fd90691c", "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c", "test.terra.unique_core__fact_transactions_tx_id.211ea20522"], "operation.terra.terra-on-run-start-0": [], "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": [], "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": [], "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": [], "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": [], "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": [], "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": [], "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": [], "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": [], "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": [], "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": [], "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": [], "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": [], "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": [], "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": [], "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": [], "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": [], "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": [], "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": [], "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": [], "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": [], "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": [], "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": [], "test.terra.not_null_silver__messages_TX_ID.084bc612c0": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": [], "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": [], "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": [], "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": [], "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": [], "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": [], "test.terra.not_null_core__fact_transactions_tx_id.dd94c1ac9e": [], "test.terra.unique_core__fact_transactions_tx_id.211ea20522": [], "test.terra.tx_gaps_core__fact_transactions_block_id__tx_id__tx_count.165a205b8c": [], "test.terra.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": [], "test.terra.not_null_core__fact_transactions_block_id.fbece8facc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_id__NUMBER.c3f16750e8": [], "test.terra.not_null_core__fact_transactions_auth_type.c3ff76f78a": [], "test.terra.not_null_core__fact_transactions_authorizer_public_key.fc6ae8130d": [], "test.terra.not_null_core__fact_transactions_gas_limit.c3fb97a749": [], "test.terra.not_null_core__fact_transactions_gas_used.7811982ae3": [], "test.terra.not_null_core__fact_transactions_tx_code.252c0f2788": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_code__NUMBER.e10ec974e5": [], "test.terra.not_null_core__fact_transactions_tx_succeeded.85fd90691c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": [], "test.terra.not_null_core__fact_transactions_tx.56e7355817": [], "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": [], "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": [], "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": [], "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": [], "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": [], "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": [], "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": [], "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": [], "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": [], "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": [], "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": [], "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": [], "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": [], "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": [], "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": [], "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": [], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": [], "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": [], "test.terra.not_null_core__fact_messages_MESSAGE_ID.87c372bdf2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_ID__STRING__VARCHAR.673ee9328a": [], "test.terra.not_null_core__fact_messages_BLOCK_ID.c804aac939": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_ID__NUMBER__FLOAT.554b696b59": [], "test.terra.not_null_core__fact_messages_BLOCK_TIMESTAMP.43d3414c7d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2c0ae10d10": [], "test.terra.not_null_core__fact_messages_TX_ID.e208fdbc3b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_TX_ID__STRING__VARCHAR.9a21b40e4c": [], "test.terra.not_null_core__fact_messages_tx_succeeded.2fb92a20bf": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_tx_succeeded__BOOLEAN.8755b673e0": [], "test.terra.not_null_core__fact_messages_CHAIN_ID.b77c0e6e30": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_CHAIN_ID__STRING__VARCHAR.b75726d6bf": [], "test.terra.not_null_core__fact_messages_MESSAGE_INDEX.c749e8f797": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_INDEX__NUMBER.f672602c83": [], "test.terra.not_null_core__fact_messages_MESSAGE_TYPE.b2f6a11ab5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_MESSAGE_TYPE__VARCHAR.a4c2f8e812": [], "test.terra.not_null_core__fact_messages_ATTRIBUTES.b929929813": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_messages_ATTRIBUTES__OBJECT.81d16073fa": [], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_messages_message_id.fc8e077967": [], "source.terra.chainwalkers.terra2_blocks": ["model.terra.bronze__blocks"], "source.terra.chainwalkers.terra2_txs": ["model.terra.bronze__transactions"], "source.terra.anchor.bonds": ["model.terra.classic__ez_anchor_bonds"], "source.terra.anchor.borrows": ["model.terra.classic__ez_anchor_borrows"], "source.terra.anchor.burns": ["model.terra.classic__ez_anchor_burns"], "source.terra.anchor.collateral": ["model.terra.classic__ez_anchor_collateral"], "source.terra.anchor.deposits": ["model.terra.classic__ez_anchor_deposits"], "source.terra.anchor.gov_staking": ["model.terra.classic__ez_anchor_gov_staking"], "source.terra.anchor.gov_submit_proposal": ["model.terra.classic__ez_anchor_gov_submit_proposal"], "source.terra.anchor.gov_vote": ["model.terra.classic__ez_anchor_gov_vote"], "source.terra.anchor.liquidations": ["model.terra.classic__ez_anchor_liquidations"], "source.terra.anchor.redeem": ["model.terra.classic__ez_anchor_redeem"], "source.terra.anchor.repay": ["model.terra.classic__ez_anchor_repay"], "source.terra.anchor.reward_claims": ["model.terra.classic__ez_anchor_reward_claims"], "source.terra.astroport.pool_reserves": ["model.terra.classic__dim_astroport_pool_reserves"], "source.terra.astroport.swaps": ["model.terra.classic__ez_astroport_swaps"], "source.terra.gold.terra_address_labels": [], "source.terra.gold.terra_address_tags": [], "source.terra.gold.terra_daily_balances": [], "source.terra.gold.terra_prices": [], "source.terra.terra.airdrop_claims": ["model.terra.classic__ez_airdrop_claims"], "source.terra.terra.daily_balances": ["model.terra.classic__dim_daily_balances"], "source.terra.terra.gov_submit_proposal": ["model.terra.classic__ez_gov_submit_proposal"], "source.terra.terra.gov_vote": ["model.terra.classic__ez_gov_vote"], "source.terra.terra.nft_metadata": ["model.terra.classic__dim_nft_metadata"], "source.terra.terra.oracle_prices": ["model.terra.classic__dim_oracle_prices"], "source.terra.terra.reward": ["model.terra.classic__ez_reward"], "source.terra.terra.staking": ["model.terra.classic__ez_staking"], "source.terra.terra.swaps": ["model.terra.classic__ez_swaps"], "source.terra.terra.tax_rate": ["model.terra.classic__dim_tax_rate"], "source.terra.terra.transfers": ["model.terra.classic__ez_transfers"], "source.terra.terra.validator_labels": ["model.terra.classic__dim_validator_labels"], "source.terra.terra.validator_voting_power": ["model.terra.classic__dim_validator_voting_power"], "source.terra.terraswap.lp_actions": ["model.terra.classic__ez_terraswap_lp_actions"], "source.terra.terraswap.lp_stake": ["model.terra.classic__ez_terraswap_lp_stake"], "source.terra.terraswap.pool_reserves": ["model.terra.classic__dim_terraswap_pool_reserves"], "source.terra.terraswap.swaps": ["model.terra.classic__ez_terraswap_swaps"], "source.terra.terra_sv.blocks": ["model.terra.classic__fact_blocks"], "source.terra.terra_sv.labels": ["model.terra.classic__dim_labels"], "source.terra.terra_sv.msgs": ["model.terra.classic__fact_messages"], "source.terra.terra_sv.msg_events": ["model.terra.classic__fact_message_events"], "source.terra.terra_sv.transactions": ["model.terra.classic__fact_transactions"], "source.terra.terra_sv.transitions": ["model.terra.classic__fact_transitions"], "source.terra.labels.address_labels": ["model.terra.core__dim_address_labels"]}}